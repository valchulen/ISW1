

----QUIT----(11 August 2019 20:30:30) CuisUniversity-3839.image priorSource: 9989307!

----STARTUP---- (11 August 2019 20:30:31) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-3839.image!


!classDefinition: #BecomeTestExperiment category: #'BaseImageTests-Kernel'!
Object subclass: #BecomeTestExperiment
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'BaseImageTests-Kernel'!

!classDefinition: #BecomeTestExperiment category: #'BaseImageTests-Kernel'!
Object subclass: #BecomeTestExperiment
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'BaseImageTests-Kernel'!
!ArrayLiteralTest methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:30:50'!
array ^ #(nil true false)! !

ArrayLiteralTest removeSelector: #array!
!ArrayLiteralTest methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:30:50'!
array ^ #(#nil #true #false #'nil' #'true' #'false')! !

ArrayLiteralTest removeSelector: #array!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #SuperclassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #SuperclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
SuperclassWithInstVar subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddInstVar!

Smalltalk removeClassNamed: #SuperclassWithInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: #'__Refactoring-TestData__'!
ClassToAddInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #SubclassWithInstVar!

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:31'!
m1 | a | a := 10.! !

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:31'!
m1:a! !

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:32'!
m1 [ :a | ] value: 1! !

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:32'!
m1 [ | a | ] value! !

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassOfClassToRefactor category: #'__Refactoring-TestData__'!
ClassToAddInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassOfClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:33'!
m1 | a | ! !

Smalltalk removeClassNamed: #SubclassOfClassToRefactor!

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:34'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:34'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:34'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:34' prior: 50722580!
sender_m1 self m1: 1! !

ClassToAddParameter removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35'!
sender_m1 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35' prior: 50722606!
sender_m1 self m1: 1 m2: 2! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35'!
sender_m1 self m1: 1. self m1: 1.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35' prior: 50722633!
sender_m1 self m1: 1 m2: 2. self m1: 1 m2: 2.! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36'!
sender_m1 self m1: self size.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36' prior: 50722661!
sender_m1 self m1: self size m2: 2.! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36'!
sender_m1 self m1: self size + 4.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36' prior: 50722689!
sender_m1 self m1: self size + 4 m2: 2.! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:37'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:37'!
sender_m1 self m1: (self at: 1 put: 2).! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:37'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:37' prior: 50722717!
sender_m1 self m1: (self at: 1 put: 2) m2: 2.! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38'!
sender_m1 #m1 size! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38' prior: 50722745!
sender_m1 #m1: size! !

ClassToAddParameter removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38'!
sender_m1 #m1: size.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38' prior: 50722771!
sender_m1 #m1:m2: size.! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: 'newParam'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:40'!
m1! !

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:41'!
m1:newParam! !

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:43'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:43'!
sender_m1 self m1
	! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:43'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:43' prior: 50722821!
sender_m1 self m1: 1
	! !

ClassToAddParameter removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:44'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:44'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:44'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:44' prior: 50722846!
sender_m1 self m1: (self at: 1)! !

ClassToAddParameter removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45'!
sender_m1 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45' prior: 50722872!
sender_m1 self m1: 1 m2: (self at: 1)! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45'!
sender_m1 self m1:[ 1 factorial ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45' prior: 50722900!
sender_m1 self m1:[ 1 factorial ] m2: 1! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46'!
sender self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46'!
m2: newParam m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46' prior: 50722928!
sender self m2: 2 m1: 1! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46'!
sender self m1: 1 m3: 3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46'!
m1: p1 m2: newParam m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46' prior: 50722954!
sender self m1: 1 m2: 2 m3: 3! !

ClassToAddParameter removeSelector: #m1:m3:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:47'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:47'!
sender
	self m1: 1 m3: 3.
	self
		m1: 4
		m3: 6! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:47'!
m1: p1 m2: newParam m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:47' prior: 50722981!
sender
	self m1: 1 m2: 2 m3: 3.
	self
		m1: 4
		m2: 2 m3: 6! !

ClassToAddParameter removeSelector: #m1:m3:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:48'!
m1

! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:48'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:48'!
m1: newParam

! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:48' prior: 50723009!
sender_m1 self m1: 1! !

ClassToAddParameter removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToChangeSelectorOrder category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:50'!
m1: p1 m2: p2! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:50'!
m2: p2 m1: p1! !

ClassToChangeSelectorOrder removeSelector: #m1:m2:!

Smalltalk removeClassNamed: #ClassToChangeSelectorOrder!

!classDefinition: #ClassToChangeSelectorOrder category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:51'!
m1: p1 m2: p2! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:51'!
m2: p2 m1: p1! !

ClassToChangeSelectorOrder removeSelector: #m1:m2:!

Smalltalk removeClassNamed: #ClassToChangeSelectorOrder!

!classDefinition: #ClassToChangeSelectorOrder category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:51'!
m1: p1 m2: p2 m3: p3! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:51'!
m2: p2 m3: p3 m1: p1! !

ClassToChangeSelectorOrder removeSelector: #m1:m2:m3:!

Smalltalk removeClassNamed: #ClassToChangeSelectorOrder!

!classDefinition: #ClassToExtractTemp category: #'__Refactoring-TestData__'!
Object subclass: #ClassToExtractTemp
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToExtractTemp!

!classDefinition: #ClassToRefactorSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractTemp category: #'__Refactoring-TestData__'!
ClassToRefactorSuperclass subclass: #ClassToExtractTemp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToExtractTemp!

Smalltalk removeClassNamed: #ClassToRefactorSuperclass!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddSuperclass!

Smalltalk removeClassNamed: #AddedSuperclass!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddSuperclass
	instanceVariableNames: 'instVar1 instVar2'
	classVariableNames: 'ClassVar1 ClassVar2'
	poolDictionaries: 'SharedAAA'
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: 'instVar1 instVar2'
	classVariableNames: 'ClassVar1 ClassVar2'
	poolDictionaries: 'SharedAAA'
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddSuperclass!

Smalltalk removeClassNamed: #AddedSuperclass!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddSuperclass!

Smalltalk removeClassNamed: #AddedSuperclass!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddSuperclass!

Smalltalk removeClassNamed: #AddedSuperclass!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AlreadyExistingClass category: #'__Refactoring-TestData__'!
Object subclass: #AlreadyExistingClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddSuperclass!

Smalltalk removeClassNamed: #AlreadyExistingClass!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddSuperclass!

Smalltalk removeClassNamed: #AddedSuperclass!

!classDefinition: #ClassWithoutInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithoutInstVar!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithInstVar!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:05'!
m1 ^a! !

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithInstVar!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithReferenceInstVar category: #'__Refactoring-TestData__'!
ClassWithInstVar subclass: #ClassWithReferenceInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithReferenceInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:06'!
m1 ^a! !

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithReferenceInstVar!

Smalltalk removeClassNamed: #ClassWithInstVar!

!classDefinition: #ClassWithoutInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithoutInstVar!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:07'!
m1 ^a! !

Smalltalk removeClassNamed: #ClassWithInstVar!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithInstVar!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:09'!
m1: parameter! !

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:09'!
m1: parameter! !

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:10'!
m1: parameter! !

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:10'!
m1: parameter ^parameter! !

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:11'!
m1:parameter1 
	m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:11'!
m2:parameter2! !

ClassToRemoveParameter removeSelector: #m1:m2:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:11'!
m1:parameter1 m2:parameter2
	| t1 |! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:11'!
m1:parameter1 
	| t1 |! !

ClassToRemoveParameter removeSelector: #m1:m2:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:12'!
m0: parameter0 
	m1:parameter1 
	m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:12'!
m0: parameter0 
	m2:parameter2! !

ClassToRemoveParameter removeSelector: #m0:m1:m2:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:13'!
m1:parameter1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:13'!
m1! !

ClassToRemoveParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:13'!
m1:parameter1 m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:13'!
sender
		self 
			m1: 1 
			m2: 2 ! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:13'!
m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:13' prior: 50723512!
sender
		self 
			m2: 2 ! !

ClassToRemoveParameter removeSelector: #m1:m2:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14'!
m1:parameter1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14'!
sender
		self 
			m1:
			 (1+2).! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14' prior: 50723540!
sender
		self 
			m1.! !

ClassToRemoveParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14'!
m1:parameter1 m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14'!
sender
		self m1: (1+1) m2: 2.
		self m1: 3 m2: 4.! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14'!
m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14' prior: 50723567!
sender
		self m2: 2.
		self m2: 4.! !

ClassToRemoveParameter removeSelector: #m1:m2:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #OldClassTest07 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #NewClassTest07!

!classDefinition: #OldClassTest07 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest07 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:17'!
m1 OldClassTest07 new! !
!NewClassTest07 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:17' prior: 50723599!
m1 NewClassTest07 new! !

Smalltalk removeClassNamed: #NewClassTest07!

!classDefinition: #OldClassTest08 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest08
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest08 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:18'!
m1 #OldClassTest08 size! !
!NewClassTest8 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:18' prior: 50723615!
m1 #NewClassTest8 size! !

Smalltalk removeClassNamed: #NewClassTest8!

!classDefinition: #OldClassTest09 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest09
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest09 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:18'!
m1 OldClassTest09 new. Object new! !
!NewClassTest09 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:18' prior: 50723631!
m1 NewClassTest09 new. Object new! !

Smalltalk removeClassNamed: #NewClassTest09!

!classDefinition: #OldClassTest10 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest10
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest10 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:19'!
m1 #OldClassTest10 size. #Object size! !
!NewClassTest10 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:19' prior: 50723649!
m1 #NewClassTest10 size. #Object size! !

Smalltalk removeClassNamed: #NewClassTest10!

!classDefinition: #OldClassTest11 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest11
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest11 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:20'!
m1 OldClassTest11 new. #OldClassTest11 size! !
!NewClassTest11 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:20' prior: 50723667!
m1 NewClassTest11 new. #NewClassTest11 size! !

Smalltalk removeClassNamed: #NewClassTest11!

!classDefinition: #OldClassTest14 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest14
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #OldClassTest14!

!classDefinition: #ClassReferencingClassVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:21'!
m1 ^OldClassTest15! !

!classDefinition: #OldClassTest15 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest15
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #NewClassTest15!

Smalltalk removeClassNamed: #ClassReferencingClassVar!

!classDefinition: #ClassReferencingClassVarSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: #'__Refactoring-TestData__'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:22'!
m1 ^OldClassTest16! !

!classDefinition: #OldClassTest16 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest16
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #NewClassTest16!

Smalltalk removeClassNamed: #ClassReferencingClassVar!

Smalltalk removeClassNamed: #ClassReferencingClassVarSuperclass!

!classDefinition: #ClassReferencingClassVarSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: #'__Refactoring-TestData__'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:23'!
m1 ^NewClassTest17! !

!classDefinition: #OldClassTest17 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest17
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #NewClassTest17!

Smalltalk removeClassNamed: #ClassReferencingClassVar!

Smalltalk removeClassNamed: #ClassReferencingClassVarSuperclass!

!classDefinition: #OldClassTest18 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest18 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:24'!
m1 ^OldClassTest18! !
!NewClassTest18 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:25' prior: 50723781!
m1 ^NewClassTest18! !

Smalltalk removeClassNamed: #NewClassTest18!

!classDefinition: #OldClassTest18 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #OldClassTest18!

!classDefinition: #AClassToRefactor category: #'__Refactoring-TestData__'!
Object subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:28'!
m1 ^OldNameToRename__! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:28' prior: 50723809!
m1 ^NewNameToRename__! !

Smalltalk removeClassNamed: #AClassToRefactor!

!classDefinition: #AClassToRefactor category: #'__Refactoring-TestData__'!
Object subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:28'!
m1 ^#OldNameToRename__! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:28' prior: 50723825!
m1 ^#NewNameToRename__! !

Smalltalk removeClassNamed: #AClassToRefactor!

!classDefinition: #ClassReferencingClassVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:29'!
m1 ^OldNameToRename__! !

Smalltalk removeClassNamed: #ClassReferencingClassVar!

!classDefinition: #ClassReferencingClassVarSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: #'__Refactoring-TestData__'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:30'!
m1 ^OldNameRenamed__! !

Smalltalk removeClassNamed: #ClassReferencingClassVar!

Smalltalk removeClassNamed: #ClassReferencingClassVarSuperclass!

!classDefinition: #ClassReferencingClassVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:31'!
m1 ^OldNameToRename__! !

Smalltalk removeClassNamed: #ClassReferencingClassVar!

!classDefinition: #ClassWithoutInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithoutInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #SuperclassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #SuperclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
SuperclassWithInstVar subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

Smalltalk removeClassNamed: #SuperclassWithInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: #'__Refactoring-TestData__'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #SubclassWithInstVar!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:37'!
m1 ^old! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:37' prior: 50724007!
m1 ^new! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:37'!
m1 old := 10! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:37' prior: 50724039!
m1 new := 10! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: #'__Refactoring-TestData__'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:38'!
m1 old := 10. ^old! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:38' prior: 50724079!
m1 new := 10. ^new! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #SubclassWithInstVar!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old keep'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:39'!
m1 keep := old. ^keep! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old keep new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:39' prior: 50724113!
m1 keep := new. ^keep! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'keep new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:40'!
m1 | new | new := 10.! !

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:40'!
m1:new! !

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:41'!
m1 [ :new | ] value: 1! !

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:41'!
m1 [ | new | ] value! !

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassOfClassToRefactor category: #'__Refactoring-TestData__'!
ClassToRenameInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassOfClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:42'!
m1 | new | ! !

Smalltalk removeClassNamed: #SubclassOfClassToRefactor!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:43'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:43'!
newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:43'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:43'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:43'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:43' prior: 50724265!
m1__ self newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:44'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:44'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:44' prior: 50724291!
m1__ self oldXyz__. self toKeep! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:44'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:44' prior: 50724295!
m1__ self newXyz__. self toKeep! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:46'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:46'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'oldSelectorCategory' stamp: 'HAW 8/11/2019 20:32:46'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:46' prior: 50724322!
m1__ self newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:47'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:47'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:47' prior: 50724344!
oldXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:47'!
newXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:47' prior: 50724356!
newXyz__ self newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48' prior: 50724376!
oldXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
newXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48' prior: 50724384!
oldXyz__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48' prior: 50724388!
newXyz__ self newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48' prior: 50724413!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
m1 #oldXyz__ size! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48' prior: 50724425!
m1 #newXyz__ size! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49' prior: 50724451!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49' prior: 50724459!
m1__ self newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

ClassToRenameSelector class removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassToAvoidRenameSelector!

!classDefinition: #SuperclassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: #'__Refactoring-TestData__'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50' prior: 50724511!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50' prior: 50724519!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50' prior: 50724535!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50' prior: 50724543!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50' prior: 50724559!
m1__ self newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50' prior: 50724567!
m1__ self newXyz__! !

SuperclassToRenameSelector removeSelector: #oldXyz__!

SuperclassToRenameSelector class removeSelector: #oldXyz__!

ClassToRenameSelector removeSelector: #oldXyz__!

ClassToRenameSelector class removeSelector: #oldXyz__!

SubclassToRenameSelector removeSelector: #oldXyz__!

SubclassToRenameSelector class removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #SubclassToRenameSelector!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #SuperclassToRenameSelector!

Smalltalk removeClassNamed: #ClassToAvoidRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
m1__ self oldXyz__! !

!classDefinition: #AnotherclassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: #'__Refactoring-TestData__-toAvoid'!
Object subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51' prior: 50724688!
m1__ self newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51' prior: 50724696!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51' prior: 50724664!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51' prior: 50724672!
m1__ self newXyz__! !

AnotherclassToRenameSelector removeSelector: #oldXyz__!

AnotherclassToRenameSelector class removeSelector: #oldXyz__!

ClassToRenameSelector removeSelector: #oldXyz__!

ClassToRenameSelector class removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToAvoidRenameSelector!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #AnotherclassToRenameSelector!

!classDefinition: #SuperclassToRenameSelector category: #'__Refactoring-TestData__-Another'!
Object subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: #'__Refactoring-TestData__'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !

!classDefinition: #AnotheclassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #AnotheclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !

!classDefinition: #OtherCatClassToRenameSelector category: #'__Refactoring-TestData__-Another'!
Object subclass: #OtherCatClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: #'__Refactoring-TestData__-toAvoid'!
Object subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724827!
m1__ self newXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724876!
m1__ self newXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724843!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724803!
m1__ self newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724771!
m1__ self newXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724868!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724795!
m1__ self newXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724851!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724819!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724779!
m1__ self newXyz__! !

AnotheclassToRenameSelector class removeSelector: #oldXyz__!

ClassToRenameSelector removeSelector: #oldXyz__!

SubclassToRenameSelector class removeSelector: #oldXyz__!

SuperclassToRenameSelector removeSelector: #oldXyz__!

ClassToRenameSelector class removeSelector: #oldXyz__!

SubclassToRenameSelector removeSelector: #oldXyz__!

SuperclassToRenameSelector class removeSelector: #oldXyz__!

OtherCatClassToRenameSelector class removeSelector: #oldXyz__!

OtherCatClassToRenameSelector removeSelector: #oldXyz__!

AnotheclassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToAvoidRenameSelector!

Smalltalk removeClassNamed: #AnotheclassToRenameSelector!

Smalltalk removeClassNamed: #SubclassToRenameSelector!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #SuperclassToRenameSelector!

Smalltalk removeClassNamed: #OtherCatClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
m1__ self oldXyz__! !

!classDefinition: #AnotherclassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54' prior: 50725020!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54' prior: 50725028!
m1__ self newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54' prior: 50725044!
m1__ self newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54' prior: 50725052!
m1__ self newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

ClassToRenameSelector class removeSelector: #oldXyz__!

AnotherclassToRenameSelector removeSelector: #oldXyz__!

AnotherclassToRenameSelector class removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #AnotherclassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56' prior: 50725109!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
m1 ^#(#oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56' prior: 50725121!
m1 ^#(#newXyz__)! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56' prior: 50725143!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
m1 ^#(#oldXyz__ #oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56' prior: 50725155!
m1 ^#(#newXyz__ #newXyz__)! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:57'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:57'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:57' prior: 50725178!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:57'!
m1 ^#(#oldXyz__ #oldXyz__), #(#oldXyz__ #oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:57'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:57' prior: 50725190!
m1 ^#(#newXyz__ #newXyz__), #(#newXyz__ #newXyz__)! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58' prior: 50725214!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
m1 ^#(#oldXyz__ #oldXyz__1)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58' prior: 50725226!
m1 ^#(#newXyz__ #oldXyz__1)! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58' prior: 50725249!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
m1 ^#(#oldXyz__ #oldXyz__:)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58' prior: 50725261!
m1 ^#(#newXyz__ #oldXyz__:)! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59'!
&& aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59'!
m1 ^self && 1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59'!
abc: aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59' prior: 50725288!
m1 ^self abc: 1! !

ClassToRenameSelector removeSelector: #&&!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59'!
abc: aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59'!
m1 ^self abc: 1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59'!
&& aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59' prior: 50725314!
m1 ^self && 1! !

ClassToRenameSelector removeSelector: #abc:!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:00'!
&& aParameter! !

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:00'!
abc: p1 def: p2! !

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #SuperclassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: #'__Refactoring-TestData__'!
SuperclassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01' prior: 50725366!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01' prior: 50725374!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01' prior: 50725390!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01' prior: 50725398!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01' prior: 50725414!
m1__ self newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01' prior: 50725422!
m1__ self newXyz__! !

SuperclassToRenameSelector removeSelector: #oldXyz__!

SuperclassToRenameSelector class removeSelector: #oldXyz__!

ClassToRenameSelector removeSelector: #oldXyz__!

ClassToRenameSelector class removeSelector: #oldXyz__!

SubclassToRenameSelector removeSelector: #oldXyz__!

SubclassToRenameSelector class removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #SubclassToRenameSelector!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #SuperclassToRenameSelector!

!classDefinition: #ClassToRenameTemp category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameTemp
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameTemp!

!classDefinition: #ClassToRefactorSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameTemp category: #'__Refactoring-TestData__'!
ClassToRefactorSuperclass subclass: #ClassToRenameTemp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameTemp!

Smalltalk removeClassNamed: #ClassToRefactorSuperclass!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRemove!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRemove!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:07'!
m1 ^ClassToRemove! !

Smalltalk removeClassNamed: #ClassToRemove!

Smalltalk removeClassNamed: #ClassReferencingClassToRemove!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:08'!
m1 ^ClassToRemove! !

Smalltalk removeClassNamed: #ClassToRemove!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: #'__Refactoring-TestData__'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRemoveSubclass!

Smalltalk removeClassNamed: #ClassToRemove!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: #'__Refactoring-TestData__'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassToRemoveSubclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassToRemoveSubclass methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:10'!
m1 ^ClassToRemoveSubclass! !

Smalltalk removeClassNamed: #ClassToRemoveSubclass!

Smalltalk removeClassNamed: #ClassToRemove!

Smalltalk removeClassNamed: #ClassReferencingClassToRemoveSubclass!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: #'__Refactoring-TestData__'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRemoveSubclass!

Smalltalk removeClassNamed: #ClassToRemove!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: #'__Refactoring-TestData__'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:12'!
m1 ^ClassToRemoveSubclass! !
!ClassToRemoveSubclass methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:12'!
m2 ^ClassToRemove! !

Smalltalk removeClassNamed: #ClassToRemoveSubclass!

Smalltalk removeClassNamed: #ClassToRemove!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:13'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:13' prior: 50725671!
m1 ! !

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:13'!
m1| a |a := 2.
	^a! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:13' prior: 50725695!
m1 a := 2.
	^a! !

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:14'!
m1! !

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:14'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:14'!
m2| a |! !

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassToRefactor category: #'__Refactoring-TestData__'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:15'!
m1| a |! !

Smalltalk removeClassNamed: #SubclassToRefactor!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassToRefactor category: #'__Refactoring-TestData__'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:16'!
m1| a |! !
!SubclassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:16'!
m2| a |! !

Smalltalk removeClassNamed: #SubclassToRefactor!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:16'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:16' prior: 50725795!
m1 ! !

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:17'!
m1| a b |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:17' prior: 50725819!
m1|  b |! !

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:18'!
m1
	[ | a | ].
	[ | a | ].! !

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:18'!
m1
	[ | a | ].! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:18' prior: 50725856!
m1
	[   ].! !

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:19'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:19'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:19'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:19' prior: 50725883!
m3 | x | self m2. false ifTrue: [ x m1 ]! !

ClassToRenameSelector removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20' prior: 50725946!
m3 | x | x := ClassOfSender new. x m2! !

ClassToRenameSelector removeSelector: #m1!

Smalltalk removeClassNamed: #ClassOfSender!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:21'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:21'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:21'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:21'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:21'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:21' prior: 50725984!
m3 | x | x := self. x := ClassOfSender new. x m2! !

ClassToRenameSelector removeSelector: #m1!

ClassOfSender removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:22'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:22'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:22'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:22'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:22'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:22' prior: 50726027!
m3 | x y | x := self. y := ClassOfSender new. x m2. y m2! !

ClassToRenameSelector removeSelector: #m1!

ClassOfSender removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:23'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:23'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:23'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:23'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:23'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:23' prior: 50726070!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m2. y m2! !

ClassToRenameSelector removeSelector: #m1!

ClassOfSender removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24' prior: 50726103!
m3 | x | self m2. false ifTrue: [ x m2 ]! !

ClassToRenameSelector removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24' prior: 50726137!
m3 | x | x := self. x := ClassOfSender new. x m2! !

ClassOfSender removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:25'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:25'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:25'!
m3 self m1. ClassOfSender new m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:25'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:25' prior: 50726175!
m3 self m2. ClassOfSender new m1! !

ClassToRenameSelector removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26'!
m3 |x| self m1. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26' prior: 50726202!
m3 |x| self m2. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26' prior: 50726210!
m3 |x| self m2. x m1! !

ClassToRenameSelector removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

Smalltalk removeClassNamed: #LiveTypingClassToBeRemoved!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

Smalltalk removeClassNamed: #LiveTypingClassToBeRemoved!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

Smalltalk removeClassNamed: #LiveTypingClassToBeRemoved!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

Smalltalk removeClassNamed: #LiveTypingClassToBeRemoved!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

Smalltalk removeClassNamed: #LiveTypingClassToBeRemoved!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

Smalltalk removeClassNamed: #LiveTypingClassToBeRemoved!

----QUIT----(11 August 2019 20:33:45) CuisUniversity-3839.image priorSource: 12503879!

----STARTUP---- (15 August 2019 18:33:07) as /home/valchu/Downloads/linux64/CuisUniversity-3839.image!


1.!

-1.!

3.14.!

true.!

false.!

nil.!

meter.!

centimeter.!

'hola'.!

Monday.!

$h.!

hour.!

10 factorial.!

100 factorial. !

100 factorial / 99 factorial.!

true not.!

false not.!

true & false.!

true & true.!

10 * meter.!

(10 * meter) + (20 * meter).!

(10 * meter) + (20 * centimeter).!

(10 * meter) + (20 * centimeter).!

(10 * hour) + (12 minute) convertTo: hour.!

(10 * hour) + (12 * minute) convertTo: hour.!

(10 * hour) + (10 * minute) convertTo: hour. 51/5 hours !

(10 * hour) + (10 * minute) convertTo: hour.!

ObjectBuilder create: #anObject asChildOf: DenotativeObject collaboratorNames: '' in: 'Clase 2'!

!classDefinition: #anObject category: #'Clase 2'!
DenotativeObject subclass: #anObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase 2'!

!classDefinition: 'anObject class' category: #'Clase 2'!
anObject class
	instanceVariableNames: ''!
!anObject class methodsFor: 'nil' stamp: 'VPM 8/15/2019 19:55:48'!
turnOn
	! !
!anObject class methodsFor: 'nil' stamp: 'VPM 8/15/2019 19:56:48' prior: 50726340!
turnOn! !
!anObject class methodsFor: 'nil' stamp: 'VPM 8/15/2019 19:57:02'!
turnOff! !
!anObject class methodsFor: 'nil' stamp: 'VPM 8/15/2019 19:57:10'!
speedUp! !
!anObject class methodsFor: 'nil' stamp: 'VPM 8/15/2019 19:57:20'!
break! !
!anObject class methodsFor: 'nil' stamp: 'VPM 8/15/2019 19:59:35'!
openTrunk! !
!unVehiculo class methodsFor: 'nil' stamp: 'VPM 8/15/2019 20:04:57'!
asJson! !
!unVehiculo class methodsFor: 'nil' stamp: 'VPM 8/15/2019 20:05:03'!
save! !
!unVehiculo class methodsFor: 'nil' stamp: 'VPM 8/15/2019 20:05:13'!
asHTML! !

ObjectBuilder create: #AlanTuring asChildOf: DenotativeObject collaboratorNames: '' in: 'Clase 2'!

!classDefinition: #AlanTuring category: #'Clase 2'!
DenotativeObject subclass: #AlanTuring
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase 2'!

!classDefinition: 'AlanTuring class' category: #'Clase 2'!
AlanTuring class
	instanceVariableNames: ''!

AlanTuring dateOfBirth.!

AlanTuring date.!

AlanTuring date!

AlanTuring date!

AlanTuring dateOfBirth.!

AlanTuring printString!
!AlanTuring class methodsFor: 'nil' stamp: 'VPM 8/15/2019 20:49:07'!
dateOfBirth
	self shouldBeImplemented! !

AlanTuring dateOfBirth !
!AlanTuring class methodsFor: 'as yet unclassified' stamp: 'VPM 8/15/2019 20:50:20' prior: 50726383!
dateOfBirth
	^June/23/1912! !

AlanTuring dateOfBirth !

ObjectBuilder create: #AlonsoChurch asChildOf: DenotativeObject collaboratorNames: '' in: 'Clase 2'!

!classDefinition: #AlonsoChurch category: #'Clase 2'!
DenotativeObject subclass: #AlonsoChurch
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase 2'!

!classDefinition: 'AlonsoChurch class' category: #'Clase 2'!
AlonsoChurch class
	instanceVariableNames: ''!
!AlonsoChurch class methodsFor: 'nil' stamp: 'VPM 8/15/2019 20:57:27'!
dateOfBirth
	^June/14/1903! !

AlonsoChurch dateOfBirth inspect!

ObjectBuilder create: #AlanKey asChildOf: DenotativeObject collaboratorNames: '' in: 'Clase 2'!

!classDefinition: #AlanKey category: #'Clase 2'!
DenotativeObject subclass: #AlanKey
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase 2'!

!classDefinition: 'AlanKey class' category: #'Clase 2'!
AlanKey class
	instanceVariableNames: ''!
!AlanKey class methodsFor: 'nil' stamp: 'VPM 8/15/2019 21:00:49'!
dateOfBirth
	^May/17/1940! !

ObjectBuilder create: #DanIngalls asChildOf: DenotativeObject collaboratorNames: '' in: 'Clase 2'!

!classDefinition: #DanIngalls category: #'Clase 2'!
DenotativeObject subclass: #DanIngalls
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase 2'!

!classDefinition: 'DanIngalls class' category: #'Clase 2'!
DanIngalls class
	instanceVariableNames: ''!
!DanIngalls class methodsFor: 'nil' stamp: 'VPM 8/15/2019 21:01:31'!
dateOfBirth
	^January/1/1970! !
!AlonsoChurch class methodsFor: 'nil' stamp: 'VPM 8/15/2019 21:03:26'!
ageDifferenceWithAlanTuring
	^AlanTuring dateOfBirth distanceTo: self dateOfBirth! !

AlonsoChurch ageDifferenceWithAlanTuring !

AlonsoChurch ageDifferenceWithAlanTuring !
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'VPM 8/15/2019 21:10:04' prior: 50726442!
ageDifferenceWithAlanTuring
	^(AlanTuring dateOfBirth distanceTo: self dateOfBirth) convertTo: year! !
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'VPM 8/15/2019 21:10:37' prior: 50726451!
ageDifferenceWithAlanTuring
	^(self dateOfBirth distanceTo: AlanTuring dateOfBirth) convertTo: year! !

AlonsoChurch ageDifferenceWithAlanTuring!

AlonsoChurch ageDifferenceWithAlanTuring!

3250 * day convertTo: year!

(3250 * day) convertTo: year!

(3250 * day)!

inspect!
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'VPM 8/15/2019 21:12:58' prior: 50726458!
ageDifferenceWithAlanTuring
	^(self dateOfBirth distanceTo: AlanTuring dateOfBirth) convertTo: year! !

self dateOfBirth distanceTo: AlanTuring dateOfBirth!
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'VPM 8/15/2019 21:15:06' prior: 50726470!
ageDifferenceWithAlanTuring
	^self dateOfBirth year distanceTo: AlanTuring dateOfBirth year! !

AlonsoChurch ageDifferenceWithAlanTuring!

----STARTUP---- (23 August 2019 16:08:01) as /home/valchu/Downloads/linux64/CuisUniversity-3839.image!


!classDefinition: #anObject category: #'Clase 2'!
DenotativeObject subclass: #anObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase 2'!

!classDefinition: 'anObject class' category: #'Clase 2'!
anObject class
	instanceVariableNames: ''!

!classDefinition: #anObject category: #'Clase 2'!
DenotativeObject subclass: #anObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase 2'!

!classDefinition: 'anObject class' category: #'Clase 2'!
anObject class
	instanceVariableNames: ''!
!anObject class methodsFor: 'nil' stamp: 'VPM 8/15/2019 19:55:48'!
turnOn
	! !
!anObject class methodsFor: 'nil' stamp: 'VPM 8/15/2019 19:56:48' prior: 50726507!
turnOn! !
!anObject class methodsFor: 'nil' stamp: 'VPM 8/15/2019 19:57:02'!
turnOff! !
!anObject class methodsFor: 'nil' stamp: 'VPM 8/15/2019 19:57:10'!
speedUp! !
!anObject class methodsFor: 'nil' stamp: 'VPM 8/15/2019 19:57:20'!
break! !
!anObject class methodsFor: 'nil' stamp: 'VPM 8/15/2019 19:59:35'!
openTrunk! !

!classDefinition: #AlanTuring category: #'Clase 2'!
DenotativeObject subclass: #AlanTuring
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase 2'!

!classDefinition: 'AlanTuring class' category: #'Clase 2'!
AlanTuring class
	instanceVariableNames: ''!

!classDefinition: #AlanTuring category: #'Clase 2'!
DenotativeObject subclass: #AlanTuring
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase 2'!

!classDefinition: 'AlanTuring class' category: #'Clase 2'!
AlanTuring class
	instanceVariableNames: ''!
!AlanTuring class methodsFor: 'nil' stamp: 'VPM 8/15/2019 20:49:07'!
dateOfBirth
	self shouldBeImplemented! !
!AlanTuring class methodsFor: 'as yet unclassified' stamp: 'VPM 8/15/2019 20:50:20' prior: 50726543!
dateOfBirth
	^June/23/1912! !

!classDefinition: #AlonsoChurch category: #'Clase 2'!
DenotativeObject subclass: #AlonsoChurch
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase 2'!

!classDefinition: 'AlonsoChurch class' category: #'Clase 2'!
AlonsoChurch class
	instanceVariableNames: ''!

!classDefinition: #AlonsoChurch category: #'Clase 2'!
DenotativeObject subclass: #AlonsoChurch
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase 2'!

!classDefinition: 'AlonsoChurch class' category: #'Clase 2'!
AlonsoChurch class
	instanceVariableNames: ''!
!AlonsoChurch class methodsFor: 'nil' stamp: 'VPM 8/15/2019 20:57:27'!
dateOfBirth
	^June/14/1903! !

!classDefinition: #AlanKey category: #'Clase 2'!
DenotativeObject subclass: #AlanKey
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase 2'!

!classDefinition: 'AlanKey class' category: #'Clase 2'!
AlanKey class
	instanceVariableNames: ''!

!classDefinition: #AlanKey category: #'Clase 2'!
DenotativeObject subclass: #AlanKey
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase 2'!

!classDefinition: 'AlanKey class' category: #'Clase 2'!
AlanKey class
	instanceVariableNames: ''!
!AlanKey class methodsFor: 'nil' stamp: 'VPM 8/15/2019 21:00:49'!
dateOfBirth
	^May/17/1940! !

!classDefinition: #DanIngalls category: #'Clase 2'!
DenotativeObject subclass: #DanIngalls
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase 2'!

!classDefinition: 'DanIngalls class' category: #'Clase 2'!
DanIngalls class
	instanceVariableNames: ''!

!classDefinition: #DanIngalls category: #'Clase 2'!
DenotativeObject subclass: #DanIngalls
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase 2'!

!classDefinition: 'DanIngalls class' category: #'Clase 2'!
DanIngalls class
	instanceVariableNames: ''!
!DanIngalls class methodsFor: 'nil' stamp: 'VPM 8/15/2019 21:01:31'!
dateOfBirth
	^January/1/1970! !
!AlonsoChurch class methodsFor: 'nil' stamp: 'VPM 8/15/2019 21:03:26'!
ageDifferenceWithAlanTuring
	^AlanTuring dateOfBirth distanceTo: self dateOfBirth! !
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'VPM 8/15/2019 21:10:04' prior: 50726617!
ageDifferenceWithAlanTuring
	^(AlanTuring dateOfBirth distanceTo: self dateOfBirth) convertTo: year! !
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'VPM 8/15/2019 21:10:37' prior: 50726623!
ageDifferenceWithAlanTuring
	^(self dateOfBirth distanceTo: AlanTuring dateOfBirth) convertTo: year! !
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'VPM 8/15/2019 21:12:58' prior: 50726630!
ageDifferenceWithAlanTuring
	^(self dateOfBirth distanceTo: AlanTuring dateOfBirth) convertTo: year! !
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'VPM 8/15/2019 21:15:06' prior: 50726637!
ageDifferenceWithAlanTuring
	^self dateOfBirth year distanceTo: AlanTuring dateOfBirth year! !
!AlanKey class methodsFor: 'nil' stamp: 'VPM 8/23/2019 16:11:44'!
currentCompany! !

AlanKey colaboratorNamed: 'currentCompany'!

AlanKey collaboratorNamed: 'currentCompany'!

AlanKey collaboratorNamed: 'currentCompany'!

AlanKey
	collaboratorNames: 'currentCompany'
	in: 'Clase 2'!

!classDefinition: #AlanKey category: #'Clase 2'!
DenotativeObject subclass: #AlanKey
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase 2'!

!classDefinition: 'AlanKey class' category: #'Clase 2'!
AlanKey class
	instanceVariableNames: 'currentCompany'!

AlanKey class removeSelector: #currentCompany!

AlanKey collaboratorName: 'currentCompany'.!

AlanKey collaboratorNamed: 'currentCompany'.!

----QUIT----(25 August 2019 23:59:24) CuisUniversity-3839.image priorSource: 12628964!

----STARTUP---- (26 August 2019 14:00:36) as /home/valchu/Downloads/linux64/CuisUniversity-3839.image!


AlanKey collaboratorNamed: 'currentCompany'.!

AlanKey collaboratorNamed: 'currentCompany'.!

AlanKey collaboratorNamed: 'currentCompany'.!

self value.!

self value: 'VPRI'.!

self value.!

self currentCompany!

AlanKey!

AlanKey collaboratorNamed: 'currentCompany'.!

AlanKey collaboratorNamed: 'currentCompany'!

AlanKey collaboratorNamed: 'currentCompany'!

AlanKey collaboratorNamed: 'currentCompany'!

self printString !

self name !

self caca!
!AlonsoChurch class methodsFor: 'nil' stamp: 'VPM 8/26/2019 14:48:45'!
isOlderThan: aPerson
	^(self ageDifferenceWith: aPerson) positive! !
!AlonsoChurch class methodsFor: 'nil' stamp: 'VPM 8/26/2019 14:49:18'!
ageDifferenceWith: aPerson
	^self dateOfBirth year distanceTo: aPerson dateOfBirth year! !

AlonsoChurch isOlderThan: AlanTuring !

self!
!AlonsoChurch class methodsFor: 'nil' stamp: 'VPM 8/26/2019 15:13:02'!
m1: collaborator1
	| temp1 |
	^thisContext! !

self tempsAndValues !

self tempAt: 1!

self tempAt: 2!

self tempAt: 1.!

self tempAt: 2 put: 20.!

self tempAt: 2.!

AlonsoChurch m1!

AlonsoChurch m1: 'hola'!

----QUIT----(26 August 2019 17:30:32) CuisUniversity-3839.image priorSource: 12640715!

----STARTUP---- (26 August 2019 17:31:45) as /home/valchu/Downloads/linux64/CuisUniversity-3839.image!


----End fileIn of /home/valchu/Downloads/Tercera Actividad.st----!
!Bill class methodsFor: 'as yet unclassified' stamp: 'VPM 8/26/2019 17:36:50' prior: 50726738!
caminar: unaCantidadDeKilometros

	energia >= (unaCantidadDeKilometros - 3) ifFalse: [^ self error].
	energia _ energia - unaCantidadDeKilometros - 3.! !

Bill caminar: 1000!

Bill caminar: 2.!
!Bill class methodsFor: 'as yet unclassified' stamp: 'VPM 8/26/2019 17:37:22' prior: 50726766!
caminar: unaCantidadDeKilometros

	energia >= (unaCantidadDeKilometros - 3) ifFalse: [^ self error].
	energia _ energia - unaCantidadDeKilometros - 3.
	^energia! !

Bill caminar: 2.!

Bill caminar: 2. !

----SNAPSHOT----(26 August 2019 17:38:30) CuisUniversity-3839.image priorSource: 12642032!

Bill destroy!

ObjectBuilder remove: Bill!
!Bill class methodsFor: 'as yet unclassified' stamp: 'VPM 8/26/2019 17:40:03' prior: 50726776!
caminar: unaCantidadDeKilometros

	energia >= (unaCantidadDeKilometros - 3) ifFalse: [^Error].
	energia _ energia - unaCantidadDeKilometros - 3.
	^energia! !

Bill!

self !

self remove!

----STARTUP---- (26 August 2019 18:20:19) as /home/valchu/Downloads/linux64/CuisUniversity-3839.image!


ObjectBuilder create: #I asChildOf: DenotativeObject collaboratorNames: '' in: 'Tercera Actividad'!

!classDefinition: #I category: #'Tercera Actividad'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: 'I class' category: #'Tercera Actividad'!
I class
	instanceVariableNames: ''!

I
	collaboratorNames: 'value'
	in: 'Tercera Actividad'!

!classDefinition: #I category: #'Tercera Actividad'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: 'I class' category: #'Tercera Actividad'!
I class
	instanceVariableNames: 'value'!
!I class methodsFor: 'nil' stamp: 'VPM 8/26/2019 18:29:53'!
next
	self cloneNamed: self name, 'I'! !
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 8/26/2019 18:30:01' prior: 50726814!
next
	^self cloneNamed: self name, 'I'! !

I next!

DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #II category: #'Tercera Actividad'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

II class
	instanceVariableNames: 'value'!

!classDefinition: 'II class' category: #'Tercera Actividad'!
II class
	instanceVariableNames: 'value'!
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/26/2019 18:30:06'!
next
	^self cloneNamed: self name, 'I'! !

!classDefinition: 'II class' category: #'Tercera Actividad'!
II class
	instanceVariableNames: 'value next'!
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/26/2019 18:35:10' prior: 50726838!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I' 
	].
	^next
	
	! !

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #III category: #'Tercera Actividad'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

III class
	instanceVariableNames: 'value next'!

!classDefinition: 'III class' category: #'Tercera Actividad'!
III class
	instanceVariableNames: 'value next'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/26/2019 18:35:41'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I' 
	].
	^next
	
	! !

II next!

Smalltalk removeClassNamed: #III!
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/26/2019 18:44:39'!
removeAllNext


	next ifNotNil:

	[

		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

II next!

II removeAllNext!

II removeAllNext!

II next!
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/26/2019 18:45:47' prior: 50726874!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #III category: #'Tercera Actividad'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

III class
	instanceVariableNames: 'value next'!

!classDefinition: 'III class' category: #'Tercera Actividad'!
III class
	instanceVariableNames: 'value next'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/26/2019 18:45:50'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I' 
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/26/2019 18:45:50'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

II removeAllNext!

Smalltalk removeClassNamed: #III!

II!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #III category: #'Tercera Actividad'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

III class
	instanceVariableNames: 'value next'!

!classDefinition: 'III class' category: #'Tercera Actividad'!
III class
	instanceVariableNames: 'value next'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/26/2019 18:47:10'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I' 
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/26/2019 18:47:10'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

II removeAllNext!

Smalltalk removeClassNamed: #III!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #III category: #'Tercera Actividad'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

III class
	instanceVariableNames: 'value next'!

!classDefinition: 'III class' category: #'Tercera Actividad'!
III class
	instanceVariableNames: 'value next'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/26/2019 22:34:53'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I' 
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/26/2019 22:34:53'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

II next .III next.!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIII class
	instanceVariableNames: 'value next'!

!classDefinition: 'IIII class' category: #'Tercera Actividad'!
IIII class
	instanceVariableNames: 'value next'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/26/2019 22:34:58'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I' 
	].
	^next
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/26/2019 22:34:58'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

II next .III next. IIII !
!AlonsoChurch class methodsFor: 'nil' stamp: 'VPM 8/26/2019 22:38:59' prior: 50726698!
ageDifferenceWith: aPerson
	^self dateOfBirth year distanceTo: aPerson dateOfBirth year! !

----SNAPSHOT----(26 August 2019 22:43:12) CuisUniversity-3839.image priorSource: 12644298!

list length !

list size !

self selectionIndex: 1.!

self selectionIndex: 3.!

self selectionIndex: #fail.!

self selectionIndex: #fail.!

self selection: #fail.!

self browseMethodFull!

self click: adjusters localPosition: 23!

self send.!

self send!

self send!

self restart !

self back!

10 factorial.!

[ 10 factorial] .!

!classDefinition: #DoIt category: #'Workspace-Objects'!
DenotativeObject subclass: #DoIt
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Workspace-Objects'!

[ 10 factorial] . [closure] in UndefinedObject>>DoIt run!

[ 10 factorial]  value.!

[ :anInteger | anInteger factorial] value: 10.!

factorialBlock := [ :anInteger | anInteger factorial].!

factorialBlock value: 10.!

plusTenByTwentyBlock := [ :anAdder || anAdderPlusTen | anAdderPlusTen := anAdder + 10. anAdderPlusTen*20].!

plusTenByTwentyBlock value: 10.!

sum := 0.!

5 timesRepeat: [sum := sum + 10].!

sum.!

#(1 2 3 4 5) inject: 0 into: [ :a :int | a + int].!

DenotativeObject subclass: #CloneOfAlonsoChurch
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase 2'!

!classDefinition: #CloneOfAlonsoChurch category: #'Clase 2'!
DenotativeObject subclass: #CloneOfAlonsoChurch
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase 2'!

CloneOfAlonsoChurch class
	instanceVariableNames: ''!

!classDefinition: 'CloneOfAlonsoChurch class' category: #'Clase 2'!
CloneOfAlonsoChurch class
	instanceVariableNames: ''!
!CloneOfAlonsoChurch class methodsFor: 'nil' stamp: 'VPM 8/26/2019 23:16:26'!
ageDifferenceWith: aPerson
	^self dateOfBirth year distanceTo: aPerson dateOfBirth year! !
!CloneOfAlonsoChurch class methodsFor: 'nil' stamp: 'VPM 8/26/2019 23:16:26'!
ageDifferenceWithAlanTuring
	^self dateOfBirth year distanceTo: AlanTuring dateOfBirth year! !
!CloneOfAlonsoChurch class methodsFor: 'nil' stamp: 'VPM 8/26/2019 23:16:26'!
dateOfBirth
	^June/14/1903! !
!CloneOfAlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'VPM 8/26/2019 23:16:26'!
isOlderThan: aPerson
	^(self ageDifferenceWith: aPerson) positive! !
!CloneOfAlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'VPM 8/26/2019 23:16:26'!
m1: collaborator1
	| temp1 |
	^thisContext! !

(June/23/2019) = (June/23/2019).!

(June/23/2019) == (June/23/2019). !

('ho','la') = ('ho', 'la').!

('ho','la') == ('ho', 'la'). true !

100 factorial = 100 factorial.!

100 factorial == 100 factorial.!

100 factorial == 100 factorial.!

100 factorial == 100 factorial.!

100 factorial == 100 factorial.!

100 factorial == 100 factorial.!

----SNAPSHOT----(26 August 2019 23:28:50) CuisUniversity-3839.image priorSource: 12651546!

----QUIT----(26 August 2019 23:28:54) CuisUniversity-3839.image priorSource: 12654339!

----STARTUP---- (28 August 2019 15:46:44) as /home/valchu/Downloads/linux64/CuisUniversity-3839.image!


II removeAllNext .!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!

I
	collaboratorNames: 'next'
	in: 'Tercera Actividad'!

!classDefinition: #I category: #'Tercera Actividad'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: 'I class' category: #'Tercera Actividad'!
I class
	instanceVariableNames: 'next'!

II
	collaboratorNames: 'next'
	in: 'Tercera Actividad'!

!classDefinition: #II category: #'Tercera Actividad'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: 'II class' category: #'Tercera Actividad'!
II class
	instanceVariableNames: 'next'!
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 15:48:23' prior: 50726819!
next
	next ifNil: [ 
		next := self cloneNamed: self name, 'I' 
	].
	^next! !

I next.!

Smalltalk removeClassNamed: #I!

I next.!

DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #II category: #'Tercera Actividad'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

II class
	instanceVariableNames: 'next'!

!classDefinition: 'II class' category: #'Tercera Actividad'!
II class
	instanceVariableNames: 'next'!
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 15:48:55'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I' 
	].
	^next
	
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 15:48:55'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

I next. !

I next. !
!I class methodsFor: 'nil' stamp: 'VPM 8/28/2019 15:50:17'!
previous
	^nil! !

I previous .!
!II class methodsFor: 'nil' stamp: 'VPM 8/28/2019 15:55:18'!
previous
	|length str|
	
	length := self name length .
	str := self name copyFrom: 0 count: (length-1).
	
	^#(str).! !

II
	collaboratorNames: 'next prev'
	in: 'Tercera Actividad'!

!classDefinition: #II category: #'Tercera Actividad'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: 'II class' category: #'Tercera Actividad'!
II class
	instanceVariableNames: 'next prev'!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #III category: #'Tercera Actividad'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Tercera Actividad'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:05:07'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I' 
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:05:07'!
previous
	|length str|
	
	length := self name length .
	str := self name copyFrom: 0 count: (length-1).
	
	^#(str).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:05:07'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

next!
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:05:26' prior: 50727155!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.

	].
	^next
	
	! !

II removeAllNext !

Smalltalk removeClassNamed: #III!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #III category: #'Tercera Actividad'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Tercera Actividad'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:05:42'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.

	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:05:42'!
previous
	|length str|
	
	length := self name length .
	str := self name copyFrom: 0 count: (length-1).
	
	^#(str).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:05:42'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

II next!

II next.!

next collaboratorNamed: 'prev'!

next !

next addInstanceVarNamed: 'prev' withValue: self.!

self next.!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIII class' category: #'Tercera Actividad'!
IIII class
	instanceVariableNames: 'next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:08:12'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.

	].
	^next
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:08:12'!
previous
	|length str|
	
	length := self name length .
	str := self name copyFrom: 0 count: (length-1).
	
	^#(str).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:08:12'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

next collaboratorNamed: 'prev'.!

next collaboratorNamed: 'prev'!

next collaboratorNamed: 'prev' value!

next collaboratorNamed: 'prev' value.!

next collaboratorNamed: 'prev' value .!
!II class methodsFor: 'nil' stamp: 'VPM 8/28/2019 16:13:40'!
previous: num
	prev := num.! !

II removeAllNext .!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:14:12' prior: 50727222!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !

II next.!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #III category: #'Tercera Actividad'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Tercera Actividad'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:14:16'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:14:16'!
previous
	|length str|
	
	length := self name length .
	str := self name copyFrom: 0 count: (length-1).
	
	^#(str).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:14:16'!
previous: num
	prev := num.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:14:16'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

II next. III previous !

	^prev.!
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:14:34' prior: 50727169!
previous
	^prev.! !

II removeAllNext .!

Smalltalk removeClassNamed: #III!

II removeAllNext . II next.!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #III category: #'Tercera Actividad'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Tercera Actividad'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:14:46'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:14:46'!
previous
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:14:46'!
previous: num
	prev := num.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:14:46'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

II removeAllNext . II next. III previous .!

Smalltalk removeClassNamed: #III!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #III category: #'Tercera Actividad'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Tercera Actividad'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:14:51'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:14:51'!
previous
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:14:51'!
previous: num
	prev := num.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:14:51'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

 III previous .!

I class removeSelector: #previous!
!I class methodsFor: 'nil' stamp: 'VPM 8/28/2019 16:17:40'!
+ num
	^num next.! !

I + II.!

I + III.!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIII class' category: #'Tercera Actividad'!
IIII class
	instanceVariableNames: 'next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:18:04'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:18:04'!
previous
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:18:04'!
previous: num
	prev := num.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:18:04'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !
!II class methodsFor: 'nil' stamp: 'VPM 8/28/2019 16:26:30'!
+ num
	|intermedios|
	intermedios := self.
	num name length timesRepeat: [ intermedios := intermedios next ].
	^intermedios.! !

II + III.!

num name!
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:27:35' prior: 50727484!
+ num
	|intermedios|
	intermedios := self.
	num name printString length timesRepeat: [ intermedios := intermedios next ].
	^intermedios.! !

II + III.!

num name !

num name . #III print .!

num name . #III asString .!
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:28:59' prior: 50727492!
+ num
	|intermedios|
	intermedios := self.
	num name asString length timesRepeat: [ intermedios := intermedios next ].
	^intermedios.! !

II + III.!

num name asString length!

num name asString !

num name asString  . 'III' length 	.!

num name asString  . 'III' size 	.!

II + III.!
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:30:10' prior: 50727502!
+ num
	|intermedios|
	intermedios := self.
	num name asString size timesRepeat: [ intermedios := intermedios next ].
	^intermedios.! !
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:31:52' prior: 50727514!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:32:09' prior: 50727309!
previous: numDePeano
	prev := numDePeano.! !

II + III.!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIII class' category: #'Tercera Actividad'!
IIIII class
	instanceVariableNames: 'next prev'!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:32:20'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:32:20'!
previous
	^prev.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:32:20'!
previous: num
	prev := num.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:32:20'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

II removeAllNext.!

Smalltalk removeClassNamed: #IIIII!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!

I + II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #III category: #'Tercera Actividad'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Tercera Actividad'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:33:17'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:33:17'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:33:17'!
previous
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:33:17'!
previous: numDePeano
	prev := numDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:33:17'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

II + III!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIII class' category: #'Tercera Actividad'!
IIII class
	instanceVariableNames: 'next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:33:43'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:33:43'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:33:43'!
previous
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:33:43'!
previous: numDePeano
	prev := numDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:33:43'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIII class' category: #'Tercera Actividad'!
IIIII class
	instanceVariableNames: 'next prev'!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:33:43'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:33:44'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:33:44'!
previous
	^prev.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:33:44'!
previous: numDePeano
	prev := numDePeano.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:33:44'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

II + III.!

II + III. IIIII + I.!

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIII class' category: #'Tercera Actividad'!
IIIIII class
	instanceVariableNames: 'next prev'!
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:34:09'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:34:09'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:34:09'!
previous
	^prev.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:34:09'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:34:09'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

II removeAllNext!

Smalltalk removeClassNamed: #IIIIII!

Smalltalk removeClassNamed: #IIIII!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:11'!
- unNumeroDePeano
	unNumeroDePeano = #I ifFalse: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #III category: #'Tercera Actividad'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Tercera Actividad'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:19'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:19'!
- unNumeroDePeano
	unNumeroDePeano = #I ifFalse: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:19'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:19'!
previous
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:19'!
previous: numDePeano
	prev := numDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:19'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

III + II!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIII class' category: #'Tercera Actividad'!
IIII class
	instanceVariableNames: 'next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:26'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:26'!
- unNumeroDePeano
	unNumeroDePeano = #I ifFalse: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:26'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:26'!
previous
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:26'!
previous: numDePeano
	prev := numDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:26'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIII class' category: #'Tercera Actividad'!
IIIII class
	instanceVariableNames: 'next prev'!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:26'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:26'!
- unNumeroDePeano
	unNumeroDePeano = #I ifFalse: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:26'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:26'!
previous
	^prev.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:26'!
previous: numDePeano
	prev := numDePeano.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:26'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

IIII + IIIII!

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIII class' category: #'Tercera Actividad'!
IIIIII class
	instanceVariableNames: 'next prev'!
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:38'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
- unNumeroDePeano
	unNumeroDePeano = #I ifFalse: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
previous
	^prev.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIII class' category: #'Tercera Actividad'!
IIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
- unNumeroDePeano
	unNumeroDePeano = #I ifFalse: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
previous
	^prev.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIIIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIII class' category: #'Tercera Actividad'!
IIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
- unNumeroDePeano
	unNumeroDePeano = #I ifFalse: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
previous
	^prev.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIIIIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIII class' category: #'Tercera Actividad'!
IIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
- unNumeroDePeano
	unNumeroDePeano = #I ifFalse: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
previous
	^prev.! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:48:39'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

IIIIII - III!

IIIIII - III!
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:50:07' prior: 50727741!
- unNumeroDePeano
	unNumeroDePeano = #I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !

IIIIII - III!

IIIIII - III!
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:50:52' prior: 50728089!
- unNumeroDePeano
	unNumeroDePeano = I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !

IIIIII - III!

II removeAllNext !

Smalltalk removeClassNamed: #IIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIII!

Smalltalk removeClassNamed: #IIIIIII!

Smalltalk removeClassNamed: #IIIIII!

Smalltalk removeClassNamed: #IIIII!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!

10 timesRepeat: [ t := t next ].!

II + II.!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #III category: #'Tercera Actividad'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Tercera Actividad'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:44'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:44'!
- unNumeroDePeano
	unNumeroDePeano = I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:44'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:44'!
previous
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:44'!
previous: numDePeano
	prev := numDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:44'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIII class' category: #'Tercera Actividad'!
IIII class
	instanceVariableNames: 'next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:45'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:45'!
- unNumeroDePeano
	unNumeroDePeano = I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:45'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:45'!
previous
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:45'!
previous: numDePeano
	prev := numDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:45'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

II + II. IIII + IIII.!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIII class' category: #'Tercera Actividad'!
IIIII class
	instanceVariableNames: 'next prev'!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
- unNumeroDePeano
	unNumeroDePeano = I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
previous
	^prev.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
previous: numDePeano
	prev := numDePeano.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIII class' category: #'Tercera Actividad'!
IIIIII class
	instanceVariableNames: 'next prev'!
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
- unNumeroDePeano
	unNumeroDePeano = I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
previous
	^prev.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIII class' category: #'Tercera Actividad'!
IIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
- unNumeroDePeano
	unNumeroDePeano = I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
previous
	^prev.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIIIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIII class' category: #'Tercera Actividad'!
IIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
- unNumeroDePeano
	unNumeroDePeano = I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
previous
	^prev.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:50'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

II + II. IIII + IIII. IIIIIIII + IIIIII.!

DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIIIIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIII class' category: #'Tercera Actividad'!
IIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
- unNumeroDePeano
	unNumeroDePeano = I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
previous
	^prev.! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIIIIIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIIII class' category: #'Tercera Actividad'!
IIIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
- unNumeroDePeano
	unNumeroDePeano = I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
previous
	^prev.! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIIIIIIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIIIII class' category: #'Tercera Actividad'!
IIIIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
- unNumeroDePeano
	unNumeroDePeano = I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
previous
	^prev.! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIIIIIIIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIIIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIIIIII class' category: #'Tercera Actividad'!
IIIIIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
- unNumeroDePeano
	unNumeroDePeano = I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
previous
	^prev.! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIIIIIIIIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIIIIIII class' category: #'Tercera Actividad'!
IIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
- unNumeroDePeano
	unNumeroDePeano = I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
previous
	^prev.! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:56'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIIIIIIIIIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIIIIIIII class' category: #'Tercera Actividad'!
IIIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:57'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:57'!
- unNumeroDePeano
	unNumeroDePeano = I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:57'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:57'!
previous
	^prev.! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:57'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/28/2019 16:53:57'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

III - II.!

IIII - II !

IIIIIIII - II .!

II - IIIII.!

----SNAPSHOT----(28 August 2019 16:55:11) CuisUniversity-3839.image priorSource: 12654431!

----SNAPSHOT----(28 August 2019 16:55:21) CuisUniversity-3839.image priorSource: 12705987!

----QUIT----(28 August 2019 16:55:25) CuisUniversity-3839.image priorSource: 12706079!

----STARTUP---- (29 August 2019 11:53:13) as /home/valchu/Downloads/linux64/CuisUniversity-3839.image!

!I class methodsFor: 'nil' stamp: 'VPM 8/29/2019 11:54:35'!
* numDePeano
	^numDePeano! !

II removeAllNext .!

Smalltalk removeClassNamed: #IIIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIII!

Smalltalk removeClassNamed: #IIIIIII!

Smalltalk removeClassNamed: #IIIIII!

Smalltalk removeClassNamed: #IIIII!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!
!II class methodsFor: 'nil' stamp: 'VPM 8/29/2019 11:57:03'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !

I * I.!

I * II.!

II * I.!

II * II.!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #III category: #'Tercera Actividad'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Tercera Actividad'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:34'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:34'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:34'!
- unNumeroDePeano
	unNumeroDePeano = I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:34'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:34'!
previous
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:34'!
previous: numDePeano
	prev := numDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:34'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIII class' category: #'Tercera Actividad'!
IIII class
	instanceVariableNames: 'next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:34'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:34'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:34'!
- unNumeroDePeano
	unNumeroDePeano = I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:34'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:34'!
previous
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:35'!
previous: numDePeano
	prev := numDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:35'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

IIII * II.!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIII class' category: #'Tercera Actividad'!
IIIII class
	instanceVariableNames: 'next prev'!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:49'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:49'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:49'!
- unNumeroDePeano
	unNumeroDePeano = I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:49'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:49'!
previous
	^prev.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:49'!
previous: numDePeano
	prev := numDePeano.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:49'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIII class' category: #'Tercera Actividad'!
IIIIII class
	instanceVariableNames: 'next prev'!
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:49'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:49'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:49'!
- unNumeroDePeano
	unNumeroDePeano = I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:49'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:49'!
previous
	^prev.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:49'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:49'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIII class' category: #'Tercera Actividad'!
IIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:49'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:49'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:49'!
- unNumeroDePeano
	unNumeroDePeano = I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:49'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:49'!
previous
	^prev.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:50'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:50'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: #IIIIIIII category: #'Tercera Actividad'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

IIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIII class' category: #'Tercera Actividad'!
IIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:50'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:50'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:50'!
- unNumeroDePeano
	unNumeroDePeano = I ifTrue: [ ^ self previous ].
	^ self previous - unNumeroDePeano previous.
! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:50'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:50'!
previous
	^prev.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:50'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:57:50'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:58:00'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	energia := 16.! !
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:58:00'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.! !
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:58:00'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	prev := I.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:58:00'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	prev := II.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:58:00'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIII.
	prev := III.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:58:00'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIII.
	prev := IIII.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:58:00'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIIII.
	prev := IIIII.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:58:00'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIIIIIII.
	prev := IIIIII.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 11:58:00'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	prev := IIIIIII.! !

Bill class removeSelector: #initializeCollaboratorsFromFile!

I class removeSelector: #initializeCollaboratorsFromFile!

II class removeSelector: #initializeCollaboratorsFromFile!

III class removeSelector: #initializeCollaboratorsFromFile!

IIII class removeSelector: #initializeCollaboratorsFromFile!

IIIII class removeSelector: #initializeCollaboratorsFromFile!

IIIIII class removeSelector: #initializeCollaboratorsFromFile!

IIIIIII class removeSelector: #initializeCollaboratorsFromFile!

IIIIIIII class removeSelector: #initializeCollaboratorsFromFile!

----SNAPSHOT----(29 August 2019 11:58:10) CuisUniversity-3839.image priorSource: 12706171!
!I class methodsFor: 'nil' stamp: 'VPM 8/29/2019 11:59:06'!
/ numDePeano
	^self.! !

I / II.!

II removeAllNext .!

Smalltalk removeClassNamed: #IIIIIIII!

Smalltalk removeClassNamed: #IIIIIII!

Smalltalk removeClassNamed: #IIIIII!

Smalltalk removeClassNamed: #IIIII!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 12:02:07' prior: 50729149!
/ numDePeano
	
	^self.! !

II removeAllNext !
!II class methodsFor: 'nil' stamp: 'VPM 8/29/2019 12:07:56'!
/ numDePeano
	|resultado|
	
	self name string length > numDePeano name string length ifFalse: [^nil].
	resultado := self ! !

ObjectBuilder create: #Verdadero asChildOf: DenotativeObject collaboratorNames: '' in: 'Tercera Actividad'!

!classDefinition: #Verdadero category: #'Tercera Actividad'!
DenotativeObject subclass: #Verdadero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: 'Verdadero class' category: #'Tercera Actividad'!
Verdadero class
	instanceVariableNames: ''!

ObjectBuilder create: #Falso asChildOf: DenotativeObject collaboratorNames: '' in: 'Tercera Actividad'!

!classDefinition: #Falso category: #'Tercera Actividad'!
DenotativeObject subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: 'Falso class' category: #'Tercera Actividad'!
Falso class
	instanceVariableNames: ''!
!Falso class methodsFor: 'nil' stamp: 'VPM 8/29/2019 12:12:39'!
no
	^Verdadero ! !
!Falso class methodsFor: 'nil' stamp: 'VPM 8/29/2019 12:13:17'!
y: valorBooleano
	^self! !
!Falso class methodsFor: 'nil' stamp: 'VPM 8/29/2019 12:13:37'!
o: valorBooleano
	^valorBooleano ! !
!Falso class methodsFor: 'nil' stamp: 'VPM 8/29/2019 12:14:03'!
siVerdadero: unClosure
	! !
!Falso class methodsFor: 'nil' stamp: 'VPM 8/29/2019 12:15:17'!
siFalso: unClosure
	^unClosure value! !

Falso siFalso: [ 1].!

Falso siVerdadero: [ 1]. !
!Falso class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 12:15:56' prior: 50729207!
siVerdadero: unClosure
	^nil! !

Falso siVerdadero: [ 1].!
!Verdadero class methodsFor: 'nil' stamp: 'VPM 8/29/2019 12:16:12'!
no
	^Falso! !
!Verdadero class methodsFor: 'nil' stamp: 'VPM 8/29/2019 12:17:08'!
y: valorBooleano
	^valorBooleano! !
!Verdadero class methodsFor: 'nil' stamp: 'VPM 8/29/2019 12:17:22'!
o: valorBooleano
	^self! !
!Verdadero class methodsFor: 'nil' stamp: 'VPM 8/29/2019 12:17:44'!
siVerdadero: unClosure
	^unClosure value! !
!Verdadero class methodsFor: 'nil' stamp: 'VPM 8/29/2019 12:18:02'!
siFalso: unClosure
	^unClosure value! !
!Verdadero class methodsFor: 'as yet unclassified' stamp: 'VPM 8/29/2019 12:18:17' prior: 50729234!
siFalso: unClosure
	^nil! !

----QUIT----(29 August 2019 12:19:13) CuisUniversity-3839.image priorSource: 12719862!

----STARTUP---- (29 August 2019 17:49:18) as /home/valchu/Downloads/linux64/CuisUniversity-3839.image!


1 + 1!

----QUIT----(29 August 2019 17:52:56) CuisUniversity-3839.image priorSource: 12722939!

----STARTUP---- (29 August 2019 17:53:13) as /home/valchu/Downloads/linux64/CuisUniversity-3839.image!


----QUIT----(29 August 2019 17:53:59) CuisUniversity-3839.image priorSource: 12723140!

----STARTUP---- (29 August 2019 17:55:31) as /home/valchu/Downloads/linux64/CuisUniversity-3839.image!


----QUIT----(29 August 2019 17:55:37) CuisUniversity-3839.image priorSource: 12723333!

----STARTUP---- (29 August 2019 18:00:51) as /home/valchu/Downloads/linux64/CuisUniversity-3839.image!


[true] whileTrue: []!

[true] whileTrue: []!

1 inspect.!

1 inspect!

#(2 3) inspect!

#(2 3) inspect!

#(2 3) inspect!

Object inspect!

'Object' inspect!

'Object' inspect!

Object inspect!

self new!

self new!

self new!

self new!

ProcessBrowser!

ProcessBrowser!

ProcessBrowser!

ProcessBrowser!

ProcessBrowser inspect!

ProcessBrowser open!

#('a' 8 #('b' 9 'c'))!

Assert shouldFail: true!

Assert!

Assert isTrue: 1 = 2!

Assert isTrue: [1 = 2]!

Assert isTrue: [1 = 2] value!

Assert isTrue: 1 = 2!

Assert isTrue: 1 = 2!

Assert isTrue: 1 = 1!

Assert isTrue: 1 = 1!

 #('a' 2 #('c' 3 'a'))!

 #('a' 2 #('c' 3 'a'))!

 #('a' 2 #('c' 3 'a'))!

 #('a' 2 #('c' 3 'a'))!

 #('a' 2 #('c' 3 'a'))!

|    elements index |
elements:= #(1 2 5 6 9).!

OrderedCollection new.
index := 1!

odds!

odds := OrderedCollection new.!

odds := OrderedCollection new.!

index := 1.!

[index <= elements size]!

[index <= elements size]
whileTrue: [
    ((elements at: index) odd  ) ifTrue: [odds add: (elements at: index)].
    index := index +1.
    ]!

[index <= elements size]
whileTrue: [
    ((elements at: index) odd  ) ifTrue: [odds add: (elements at: index)].
    index := index +1.
    ]!

#do!

do!

elements do: [ :elem | odds add: elem].!

odds.!

odds := OrderedCollection new.!

index := 1.!

elements do: [ :elem | odds add: elem].!

elements:= #(1 2 5 6 9).!

odds := OrderedCollection new.!

index := 1.!

elements do: [ :elem | odds add: elem].!

odds.!

odds := OrderedCollection new.!

index := 1.!

elements do: [ :elem | elem odd ifTrue: [odds  add: elem]].!

elements do: [ :elem | (elem odd) ifTrue: [odds  add: elem]].!

odds.!

odds := OrderedCollection new.!

odds := OrderedCollection new.

elements do: [ :elem | (elem odd) ifTrue: [odds  add: elem]].
odds.
!

odds.!

odds print!

odds := elements select: odd!

elements select: odd!

elements select: [:elem | elem odd].!

elements detect: [ :elem | elem even].!

#(1 5 9) detect: [ :elem | elem even ]!

#(1 5 9) detect: [ :elem | elem even ] ifNone: 'Paja'!

#(1 5 9) detect: [ :elem | elem even ] ifNone: [ #() ]!

----End fileIn of /home/valchu/Downloads/linux64/Packages/TerseGuide.pck.st----!

10 * peso +  10 * dollar   .!

	^Error new signal: aString.!

10 * peso +  10 * dollar!

10 * peso +( 10 * dollar) !

10 * peso +( 10 * dollar) - (2 * dollar)!

10 * peso +( 10 * dollar) - (2 * dollar) - (8 * dollar)!

peso!

peso!

peso!

peso!

peso!

10* peso!

10* peso amount!

(10* peso) amount!

(10* peso) unit!

1 amount!

1 unit!

BaseUnit amount: 1 unit: peso!

BaseUnit!

BaseUnit!

diezMetros := 10 * meter.!

BaseUnit nameForOne: 'metro' nameForMany: 'metros'. !

diezMetros := 10 * metros!

BaseUnit nameForOne: 'metro' nameForMany: 'metros'.!

diezMetros := 10 * metros!

diezMetros := 10 * metros!

BaseUnit nameForOne: 'metro' nameForMany: 'metros'.!

diezMetros := 10 * metros!

diezMetros := 10 * metro!

diezMetros := 10 * metro!

diezMetros := 10 * meter!

BaseUnit nameForOne: 'metro' nameForMany: 'metros'.!

diezMetros := 10 * metro!

BaseUnit nameForOne: 'metro' nameForMany: 'metros'.!

diezMetros := 10 * metro!

BaseUnit nameForOne: 'metro' nameForMany: 'metros'.!

metro := BaseUnit nameForOne: 'metro' nameForMany: 'metros'.!

diezMetros := 10 * metro!

centimetros := DerivedUnit newFrom: (0.001 * metro).!

DerivedUnit!

----QUIT----(29 August 2019 21:42:35) CuisUniversity-3839.image priorSource: 12723526!

----STARTUP---- (29 August 2019 21:43:35) as /home/valchu/Downloads/linux64/CuisUniversity-3839.image!


centimetros :=  ProportionalDerivedUnit !

entimetros :=  ProportionalDerivedUnit baseunit: metro conversionFactor: 1/100
	nameForOne: 'centimetro'
	nameForMany: 'centimetros'
	sign: 'cm'.!

centimetros :=  ProportionalDerivedUnit baseUnit: metro 
													conversionFactor: 1/100
													nameForOne: 'centimetro'
	nameForMany: 'centimetros'
	sign: 'cm'.!

	10* centimetros .!

	10* centimetros to: metros. !

	10* centimetros convertTo: metros. !

	10* centimetros convertTo: metro. !

----QUIT----(29 August 2019 21:54:37) CuisUniversity-3839.image priorSource: 12823127!

----STARTUP---- (31 August 2019 18:49:15) as /home/valchu/Downloads/linux64/CuisUniversity-3839.image!


Falso class removeSelector: #no!

Falso class removeSelector: #o:!

Falso class removeSelector: #siFalso:!

Falso class removeSelector: #siVerdadero:!

Falso class removeSelector: #y:!

Verdadero class removeSelector: #no!

Verdadero class removeSelector: #o:!

Verdadero class removeSelector: #siFalso:!

Verdadero class removeSelector: #siVerdadero:!

Verdadero class removeSelector: #y:!

Smalltalk removeClassNamed: #Verdadero!

Smalltalk removeClassNamed: #Falso!

Smalltalk removeClassNamed: #Bill!

Smalltalk removeClassNamed: #anObject!

Smalltalk removeClassNamed: #DanIngalls!

Smalltalk removeClassNamed: #CloneOfAlonsoChurch!

Smalltalk removeClassNamed: #AlonsoChurch!

Smalltalk removeClassNamed: #AlanTuring!

Smalltalk removeClassNamed: #AlanKay!

Smalltalk removeClassNamed: #DoIt!
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:08:25'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:09:17'!
diferenciaAbsoluta: unNumDePeano
	^unNumDePeano previous! !
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:10:34' prior: 50728097!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !

II - I!

II + II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #III category: #'Numeros de Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Numeros de Peano'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:30'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:30'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:30'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:30'!
/ numDePeano
	|resultado|
	
	self name string length > numDePeano name string length ifFalse: [^nil].
	resultado := self ! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:30'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:30'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:30'!
previous
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:30'!
previous: numDePeano
	prev := numDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:30'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIII class' category: #'Numeros de Peano'!
IIII class
	instanceVariableNames: 'next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:31'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:31'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:31'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:31'!
/ numDePeano
	|resultado|
	
	self name string length > numDePeano name string length ifFalse: [^nil].
	resultado := self ! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:31'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:31'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:31'!
previous
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:31'!
previous: numDePeano
	prev := numDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:31'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

IIII + IIII!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIII class' category: #'Numeros de Peano'!
IIIII class
	instanceVariableNames: 'next prev'!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:37'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:37'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:37'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:37'!
/ numDePeano
	|resultado|
	
	self name string length > numDePeano name string length ifFalse: [^nil].
	resultado := self ! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:37'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:37'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:37'!
previous
	^prev.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:37'!
previous: numDePeano
	prev := numDePeano.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:37'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIII class' category: #'Numeros de Peano'!
IIIIII class
	instanceVariableNames: 'next prev'!
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:37'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:37'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:37'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
/ numDePeano
	|resultado|
	
	self name string length > numDePeano name string length ifFalse: [^nil].
	resultado := self ! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
previous
	^prev.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIII class' category: #'Numeros de Peano'!
IIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
/ numDePeano
	|resultado|
	
	self name string length > numDePeano name string length ifFalse: [^nil].
	resultado := self ! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
previous
	^prev.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIII class' category: #'Numeros de Peano'!
IIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
/ numDePeano
	|resultado|
	
	self name string length > numDePeano name string length ifFalse: [^nil].
	resultado := self ! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
previous
	^prev.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:11:38'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

IIIII - III!

I * II!

I * IIII!

IIII * I!

II removeAllNext!

Smalltalk removeClassNamed: #IIIIIIII!

Smalltalk removeClassNamed: #IIIIIII!

Smalltalk removeClassNamed: #IIIIII!

Smalltalk removeClassNamed: #IIIII!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:20:08' prior: 50729165!
/ unNumDePeano
	|resultado|
	
	self name string length > unNumDePeano name string length ifFalse: [^nil].
	resultado := self ! !

II / 1!

II / I!

I/II!
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:22:22' prior: 50729161!
/ numDePeano
	
	self = numDePeano ifTrue: [^self].! !

I/I!

I/II!

I/II!

II + I!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #III category: #'Numeros de Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Numeros de Peano'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:22:47'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:22:47'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:22:47'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:22:47'!
/ unNumDePeano
	|resultado|
	
	self name string length > unNumDePeano name string length ifFalse: [^nil].
	resultado := self ! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:22:47'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:22:47'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:22:47'!
previous
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:22:47'!
previous: numDePeano
	prev := numDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:22:47'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

I/III!
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:23:18' prior: 50732845!
/ numDePeano
	
	I = numDePeano ifTrue: [^self].! !

I/III!

 I !

I/III!
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:24:46' prior: 50732915!
/ unNumDePeano
	
	I = unNumDePeano ifTrue: [^self].
	^ nil.! !

I/III!

I/I!

II removeAllNext!

Smalltalk removeClassNamed: #III!

II name string length!

II name!

II name string!

II name string!

II name string size!
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:38:10' prior: 50732837!
/ unNumDePeano
	|resultado|
	
	self name string size > unNumDePeano name string size ifFalse: [^nil].
	
	self = unNumDePeano ifTrue: [^I].
	
	resultado := self ! !
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:39:27' prior: 50732931!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !

I/I!

I/II!

II/I!

II/II!

II * II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #III category: #'Numeros de Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Numeros de Peano'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:05'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:05'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:05'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:05'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:05'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:05'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:05'!
previous
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:05'!
previous: numDePeano
	prev := numDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:05'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIII class' category: #'Numeros de Peano'!
IIII class
	instanceVariableNames: 'next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:05'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:05'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:05'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:05'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:05'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:05'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:05'!
previous
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:05'!
previous: numDePeano
	prev := numDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:05'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

IIII * IIII!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIII class' category: #'Numeros de Peano'!
IIIII class
	instanceVariableNames: 'next prev'!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:13'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:13'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:13'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:13'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:13'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:13'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
previous
	^prev.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
previous: numDePeano
	prev := numDePeano.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIII class' category: #'Numeros de Peano'!
IIIIII class
	instanceVariableNames: 'next prev'!
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
previous
	^prev.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIII class' category: #'Numeros de Peano'!
IIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
previous
	^prev.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIII class' category: #'Numeros de Peano'!
IIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
previous
	^prev.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIII class' category: #'Numeros de Peano'!
IIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
previous
	^prev.! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIIII class' category: #'Numeros de Peano'!
IIIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
previous
	^prev.! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIIIII class' category: #'Numeros de Peano'!
IIIIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
previous
	^prev.! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIIIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIIIIII class' category: #'Numeros de Peano'!
IIIIIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
previous
	^prev.! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIIIIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIIIIIII class' category: #'Numeros de Peano'!
IIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
previous
	^prev.! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:14'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIIIIIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIIIIIIII class' category: #'Numeros de Peano'!
IIIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
previous
	^prev.! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIIIIIIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIIIIIIIII class' category: #'Numeros de Peano'!
IIIIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
previous
	^prev.! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIIIIIIIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIIIIIIIIII class' category: #'Numeros de Peano'!
IIIIIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
previous
	^prev.! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 8/31/2019 19:40:15'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

IIIIIIIIII/II!

IIIIIIIIII/III!

IIIIIIIIIIII/IIII!

IIII/IIIIIIIII!

IIII/IIIIIII!

II removeAllNext !

Smalltalk removeClassNamed: #IIIIIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIII!

Smalltalk removeClassNamed: #IIIIIII!

Smalltalk removeClassNamed: #IIIIII!

Smalltalk removeClassNamed: #IIIII!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!

II + I!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #III category: #'Numeros de Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Numeros de Peano'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:51:45'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:51:45'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:51:45'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:51:45'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:51:45'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:51:45'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:51:45'!
previous
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:51:45'!
previous: numDePeano
	prev := numDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:51:45'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

III + I!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIII class' category: #'Numeros de Peano'!
IIII class
	instanceVariableNames: 'next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:51:50'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:51:50'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:51:50'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:51:50'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:51:50'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:51:50'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:51:50'!
previous
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:51:50'!
previous: numDePeano
	prev := numDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:51:50'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:53:03'!
- unNumDePeano
	self descripcionDeErrorDeNumerosNegativosNoSoportados! !
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:53:47'!
descripcionDeErrorDeNumerosNegativosNoSoportados
	^'Error'! !

I descripcionDeErrorDeNumerosNegativosNoSoportados !

I - II!

I - II!
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:56:01' prior: 50734001!
- unNumDePeano
	^self descripcionDeErrorDeNumerosNegativosNoSoportados! !

I - II!
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:57:55' prior: 50734014!
- unNumDePeano
	^self descripcionDeErrorDeNumerosNegativosNoSoportados! !
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:58:41' prior: 50732921!
/ unNumDePeano
	
	I = unNumDePeano ifTrue: [^self].
	self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor.! !
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 16:59:03'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor 
	^'Test'! !

----End fileIn of /home/valchu/Downloads/linux64/PeanoTest.st----!
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:03:40' prior: 50734020!
- unNumDePeano
	^self signal descripcionDeErrorDeNumerosNegativosNoSoportados! !
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:04:28' prior: 50734138!
- unNumDePeano
	^self signal:  Error withDescription: self descripcionDeErrorDeNumerosNegativosNoSoportados! !
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:04:44' prior: 50734144!
- unNumDePeano
	^Error withDescription: self descripcionDeErrorDeNumerosNegativosNoSoportados! !
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:05:01' prior: 50734151!
- unNumDePeano
	^Error description: self descripcionDeErrorDeNumerosNegativosNoSoportados! !
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:11:54' prior: 50734157!
- unNumDePeano
	^self error: self  descripcionDeErrorDeNumerosNegativosNoSoportados! !
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:13:02' prior: 50734026!
/ unNumDePeano
	
	I = unNumDePeano ifTrue: [^self].
	^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor.! !
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:04'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor 
	^'Test'! !

II removeAllNext!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!

II + II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #III category: #'Numeros de Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Numeros de Peano'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:19'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:19'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:19'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:19'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:19'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor 
	^'Test'! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:19'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:19'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:19'!
previous
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:19'!
previous: numDePeano
	prev := numDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:20'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIII class' category: #'Numeros de Peano'!
IIII class
	instanceVariableNames: 'next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:20'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:20'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:20'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:20'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:20'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor 
	^'Test'! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:20'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:20'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:20'!
previous
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:20'!
previous: numDePeano
	prev := numDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:14:20'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

IIII - II!

IIII/II!

II class removeSelector: #descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor!

II removeAllNext !

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:16:01' prior: 50734169!
/ unNumDePeano
	
	I = unNumDePeano ifTrue: [^self].
	^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor! !

I / II!

I / II!
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:17:49' prior: 50734033!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor 
	^'No se puede dividir por un numero mayor!!'! !

I descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor !

I / I!

I / II.!

I / II.!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #III category: #'Numeros de Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Numeros de Peano'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:27'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:27'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:27'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:27'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:27'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:27'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:27'!
previous
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:27'!
previous: numDePeano
	prev := numDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:27'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIII class' category: #'Numeros de Peano'!
IIII class
	instanceVariableNames: 'next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:27'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:27'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:27'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:27'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:27'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:27'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:27'!
previous
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:27'!
previous: numDePeano
	prev := numDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:27'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

II * II!

IIII * IIII.!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIII class' category: #'Numeros de Peano'!
IIIII class
	instanceVariableNames: 'next prev'!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
previous
	^prev.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
previous: numDePeano
	prev := numDePeano.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIII class' category: #'Numeros de Peano'!
IIIIII class
	instanceVariableNames: 'next prev'!
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
previous
	^prev.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIII class' category: #'Numeros de Peano'!
IIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
previous
	^prev.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIII class' category: #'Numeros de Peano'!
IIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
previous
	^prev.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIII class' category: #'Numeros de Peano'!
IIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
previous
	^prev.! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIIII class' category: #'Numeros de Peano'!
IIIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
previous
	^prev.! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:56'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIIIII class' category: #'Numeros de Peano'!
IIIIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
previous
	^prev.! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIIIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIIIIII class' category: #'Numeros de Peano'!
IIIIIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
previous
	^prev.! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIIIIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIIIIIII class' category: #'Numeros de Peano'!
IIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
previous
	^prev.! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIIIIIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIIIIIIII class' category: #'Numeros de Peano'!
IIIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
previous
	^prev.! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIIIIIIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIIIIIIIII class' category: #'Numeros de Peano'!
IIIIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
previous
	^prev.! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIIIIIIIIIIIIIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIIIIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIIIIIIIIIIIIIII class' category: #'Numeros de Peano'!
IIIIIIIIIIIIIIII class
	instanceVariableNames: 'next prev'!
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
previous
	^prev.! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
previous: numDePeano
	prev := numDePeano.! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:18:57'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

----End fileIn of /home/valchu/Downloads/linux64/PeanoTest.st----!
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:21:28' prior: 50734163!
- unNumDePeano
	^self error: I descripcionDeErrorDeNumerosNegativosNoSoportados! !
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:21:52' prior: 50734326!
/ unNumDePeano
	
	I = unNumDePeano ifTrue: [^self].
	^self error: I descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor! !

II removeAllNext. !

Smalltalk removeClassNamed: #IIIIIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIII!

Smalltalk removeClassNamed: #IIIIIII!

Smalltalk removeClassNamed: #IIIIII!

Smalltalk removeClassNamed: #IIIII!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!

II + II.!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #III category: #'Numeros de Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Numeros de Peano'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:22:27'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:22:27'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:22:27'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:22:27'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:22:27'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:22:27'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:22:27'!
previous
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:22:27'!
previous: numDePeano
	prev := numDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:22:27'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIII class' category: #'Numeros de Peano'!
IIII class
	instanceVariableNames: 'next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:22:27'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:22:27'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:22:27'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:22:27'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:22:27'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:22:27'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:22:27'!
previous
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:22:27'!
previous: numDePeano
	prev := numDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:22:27'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

----End fileIn of /home/valchu/Downloads/linux64/PeanoTest.st----!
!II class methodsFor: 'nil' stamp: 'VPM 9/1/2019 17:24:31'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor 
	^'No se puede dividir por un numero mayor!!'! !
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:24:52' prior: 50734006!
descripcionDeErrorDeNumerosNegativosNoSoportados
	^'No existen numeros negativos o cero!!'! !
!I class methodsFor: 'nil' stamp: 'VPM 9/1/2019 17:24:58' prior: 50735615!
descripcionDeErrorDeNumerosNegativosNoSoportados
	^'No existen numeros negativos o cero!!'! !

II removeAllNext !

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!

II + II.!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #III category: #'Numeros de Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Numeros de Peano'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor 
	^'No se puede dividir por un numero mayor!!'! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
previous
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
previous: numDePeano
	prev := numDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIII class' category: #'Numeros de Peano'!
IIII class
	instanceVariableNames: 'next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	^I + (self - unNumDePeano / unNumDePeano)! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor 
	^'No se puede dividir por un numero mayor!!'! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
previous
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
previous: numDePeano
	prev := numDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:25:10'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

----End fileIn of /home/valchu/Downloads/linux64/PeanoTest.st----!
!I class methodsFor: 'nil' stamp: 'VPM 9/1/2019 17:27:23'!
previous
	! !
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:27:34' prior: 50735868!
previous
	^self error: I descripcionDeErrorDeNumerosNegativosNoSoportados! !
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:28:49' prior: 50732940!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	[^I + (self - unNumDePeano / unNumDePeano)] on: Error do: [^self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor]! !

I / II.!

II / II.!

II removeAllNext .!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!

II * II.!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #III category: #'Numeros de Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Numeros de Peano'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:21'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:21'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:21'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:21'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	[^I + (self - unNumDePeano / unNumDePeano)] on: Error do: [^self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor]! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:21'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor 
	^'No se puede dividir por un numero mayor!!'! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:21'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:21'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:22'!
previous
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:22'!
previous: numDePeano
	prev := numDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:22'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIII class' category: #'Numeros de Peano'!
IIII class
	instanceVariableNames: 'next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:22'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:22'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:22'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:22'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	[^I + (self - unNumDePeano / unNumDePeano)] on: Error do: [^self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:22'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor 
	^'No se puede dividir por un numero mayor!!'! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:22'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:22'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:22'!
previous
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:22'!
previous: numDePeano
	prev := numDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:22'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

II / III.!
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:29:49' prior: 50735878!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	[^I + (self - unNumDePeano / unNumDePeano)] on: Error do: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor]! !

II removeAllNext.!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!

II + II.!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #III category: #'Numeros de Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Numeros de Peano'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	[^I + (self - unNumDePeano / unNumDePeano)] on: Error do: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor]! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor 
	^'No se puede dividir por un numero mayor!!'! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
previous
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
previous: numDePeano
	prev := numDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIII class' category: #'Numeros de Peano'!
IIII class
	instanceVariableNames: 'next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	[^I + (self - unNumDePeano / unNumDePeano)] on: Error do: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor 
	^'No se puede dividir por un numero mayor!!'! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
diferenciaAbsoluta: unNumDePeano
	
	^self previous diferenciaAbsoluta: unNumDePeano previous! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
previous
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
previous: numDePeano
	prev := numDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:02'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !

III / IIII.!

----End fileIn of /home/valchu/Downloads/linux64/PeanoTest.st----!
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:49'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.! !
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:50'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	prev := I.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:50'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	prev := II.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:30:50'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	prev := III.! !

I class removeSelector: #initializeCollaboratorsFromFile!

II class removeSelector: #initializeCollaboratorsFromFile!

III class removeSelector: #initializeCollaboratorsFromFile!

IIII class removeSelector: #initializeCollaboratorsFromFile!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:02'!
restaInversa: unNumDePeano
	
	^self previous restaInversa: unNumDePeano previous! !
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:28'!
restaInversa: unNumDePeano
	
	^self previous restaInversa: unNumDePeano previous! !

II class removeSelector: #diferenciaAbsoluta:!
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:41'!
restaInversa: unNumDePeano
	^unNumDePeano previous! !

I class removeSelector: #restaInversa:!

II removeAllNext .!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #III category: #'Numeros de Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Numeros de Peano'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	[^I + (self - unNumDePeano / unNumDePeano)] on: Error do: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor]! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor 
	^'No se puede dividir por un numero mayor!!'! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
previous
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
previous: numDePeano
	prev := numDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
restaInversa: unNumDePeano
	
	^self previous restaInversa: unNumDePeano previous! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIII class' category: #'Numeros de Peano'!
IIII class
	instanceVariableNames: 'next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
- unNumDePeano
	^ unNumDePeano diferenciaAbsoluta: self
! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	[^I + (self - unNumDePeano / unNumDePeano)] on: Error do: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor 
	^'No se puede dividir por un numero mayor!!'! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
previous
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
previous: numDePeano
	prev := numDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:32:59'!
restaInversa: unNumDePeano
	
	^self previous restaInversa: unNumDePeano previous! !

II + II.!

----End fileIn of /home/valchu/Downloads/linux64/PeanoTest.st----!

IIII - II.!
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:06' prior: 50732437!
- unNumDePeano
	^ unNumDePeano restaInversa: self
! !

II removeAllNext .!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!

II removeAllNext . II + II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #III category: #'Numeros de Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Numeros de Peano'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:17'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:17'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:17'!
- unNumDePeano
	^ unNumDePeano restaInversa: self
! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:17'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	[^I + (self - unNumDePeano / unNumDePeano)] on: Error do: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor]! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:17'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor 
	^'No se puede dividir por un numero mayor!!'! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:17'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:17'!
previous
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:17'!
previous: numDePeano
	prev := numDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:18'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:18'!
restaInversa: unNumDePeano
	
	^self previous restaInversa: unNumDePeano previous! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIII class' category: #'Numeros de Peano'!
IIII class
	instanceVariableNames: 'next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:18'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:18'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:18'!
- unNumDePeano
	^ unNumDePeano restaInversa: self
! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:18'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	[^I + (self - unNumDePeano / unNumDePeano)] on: Error do: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:18'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor 
	^'No se puede dividir por un numero mayor!!'! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:18'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:18'!
previous
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:18'!
previous: numDePeano
	prev := numDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:18'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:18'!
restaInversa: unNumDePeano
	
	^self previous restaInversa: unNumDePeano previous! !

----End fileIn of /home/valchu/Downloads/linux64/PeanoTest.st----!
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:42'!
restaInversa: unNumDePeano
	^unNumDePeano previous! !

I class removeSelector: #restaInversa:!

II removeAllNext . II + II IIII !

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!

II removeAllNext . II + II.!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #III category: #'Numeros de Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

III class
	instanceVariableNames: 'next prev'!

!classDefinition: 'III class' category: #'Numeros de Peano'!
III class
	instanceVariableNames: 'next prev'!
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:59'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:59'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:59'!
- unNumDePeano
	^ unNumDePeano restaInversa: self
! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:59'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	[^I + (self - unNumDePeano / unNumDePeano)] on: Error do: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor]! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:34:59'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor 
	^'No se puede dividir por un numero mayor!!'! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:35:00'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:35:00'!
previous
	^prev.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:35:00'!
previous: numDePeano
	prev := numDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:35:00'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:35:00'!
restaInversa: unNumDePeano
	
	^self previous restaInversa: unNumDePeano previous! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

!classDefinition: #IIII category: #'Numeros de Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros de Peano'!

IIII class
	instanceVariableNames: 'next prev'!

!classDefinition: 'IIII class' category: #'Numeros de Peano'!
IIII class
	instanceVariableNames: 'next prev'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:35:00'!
* numDePeano
	^numDePeano + (self previous * numDePeano).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:35:00'!
+ numDePeano
	
	^self previous + (numDePeano next).! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:35:00'!
- unNumDePeano
	^ unNumDePeano restaInversa: self
! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:35:00'!
/ unNumDePeano
		
	self = unNumDePeano ifTrue: [^I].
	
	[^I + (self - unNumDePeano / unNumDePeano)] on: Error do: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:35:00'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor 
	^'No se puede dividir por un numero mayor!!'! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:35:00'!
next

	next ifNil: [ 
		next := self cloneNamed: self name, 'I'.
		next previous: self.
	].
	^next
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:35:00'!
previous
	^prev.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:35:00'!
previous: numDePeano
	prev := numDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:35:00'!
removeAllNext


	next ifNotNil:

	[
		next removeAllNext.

		next removeFromSystem.

		next := nil.

	]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:35:00'!
restaInversa: unNumDePeano
	
	^self previous restaInversa: unNumDePeano previous! !

----End fileIn of /home/valchu/Downloads/linux64/PeanoTest.st----!
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:35:33'!
restaInversa: unNumDePeano
	^unNumDePeano previous! !

I class removeSelector: #restaInversa:!
!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:35:50'!
restaInversa: unNumDePeano
	^unNumDePeano previous! !

I class removeSelector: #diferenciaAbsoluta:!

----QUIT----(1 September 2019 17:36:21) CuisUniversity-3839.image priorSource: 12823816!

----STARTUP---- (1 September 2019 17:36:37) as /home/valchu/Downloads/linux64/CuisUniversity-3839.image!

!I class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:36:48'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.! !
!II class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:36:48'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	prev := I.! !
!III class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:36:48'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	prev := II.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'VPM 9/1/2019 17:36:48'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	prev := III.! !

I class removeSelector: #initializeCollaboratorsFromFile!

II class removeSelector: #initializeCollaboratorsFromFile!

III class removeSelector: #initializeCollaboratorsFromFile!

IIII class removeSelector: #initializeCollaboratorsFromFile!

----QUIT----(1 September 2019 17:36:52) CuisUniversity-3839.image priorSource: 12974692!

----STARTUP---- (5 September 2019 10:58:56) as /home/valchu/Documents/UBA/cuis/CuisUniversity-3839.image!


----End fileIn of /home/valchu/Documents/UBA/ISW1/CodigoRepetido-Ejercicio.st----!

----SNAPSHOT----(5 September 2019 11:00:53) CuisUniversity-3839.image priorSource: 12975986!

----QUIT----(5 September 2019 11:00:56) CuisUniversity-3839.image priorSource: 12985266!

----STARTUP---- (5 September 2019 17:18:13) as /home/valchu/Documents/UBA/cuis/CuisUniversity-3839.image!


----QUIT----(6 September 2019 10:42:45) CuisUniversity-3839.image priorSource: 12985360!

----STARTUP---- (7 September 2019 11:13:45) as /home/valchu/Documents/UBA/cuis/CuisUniversity-3839.image!

!CustomerBookTest methodsFor: 'helpers' stamp: 'VPM 9/7/2019 11:23:04'!
checkCustomerBook: aCustomerBook hasNumberOfActiveCustomers: numberOfActive numberOfInactive: numberOfInactive
	! !
!CustomerBookTest methodsFor: 'helpers' stamp: 'VPM 9/7/2019 11:24:24' prior: 50737456!
checkCustomerBook: aCustomerBook hasNumberOfActiveCustomers: numberOfActive numberOfInactive: numberOfInactive
	self assert: numberOfActive equals: aCustomerBook numberOfActiveCustomers.
	self assert: numberOfInactive equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: (numberOfActive + numberOfInactive) aCustomerBook numberOfCustomers.
	! !
!CustomerBookTest methodsFor: 'helpers' stamp: 'VPM 9/7/2019 11:24:49' prior: 50737463!
checkCustomerBook: aCustomerBook hasNumberOfActiveCustomers: numberOfActive numberOfInactive: numberOfInactive
	self assert: numberOfActive equals: aCustomerBook numberOfActiveCustomers.
	self assert: numberOfInactive equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: (numberOfActive + numberOfInactive) equals: aCustomerBook numberOfCustomers.
	! !
!CustomerBookTest methodsFor: 'testing' stamp: 'VPM 9/7/2019 11:25:20' prior: 50737238!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	customerBook := CustomerBook newWithSuspendedCustomerNamed: paulMcCartney.
	
	self checkCustomerBook: customerBook hasNumberOfActiveCustomers:  0 numberOfInactive: 1.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'VPM 9/7/2019 11:25:51' prior: 50737255!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	customerBook := CustomerBook newWithActiveCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self checkCustomerBook: customerBook hasNumberOfActiveCustomers: 0  numberOfInactive: 0.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'nil' stamp: 'VPM 9/7/2019 11:27:35'!
check: aCustomerBook cannotSuspend: aCustomer
! !
!CustomerBook methodsFor: 'testing' stamp: 'VPM 9/7/2019 11:30:04'!
allCustomers
	^active + suspended! !

a := CustomerBook newWithActiveCustomerNamed: 'kaka'.!

a allCustomers.!

a := OrderedCollection  new.!

b := OrderedCollection new.!

a+b.!

a add: 'kaka'.!

a+b!

CustomerBook removeSelector: #allCustomers!
!CustomerBook methodsFor: 'testing' stamp: 'VPM 9/7/2019 11:41:32'!
activeCustomers
	^active! !
!CustomerBook methodsFor: 'testing' stamp: 'VPM 9/7/2019 11:41:46'!
suspendedCustomers
	^suspended! !

a := OrderedCollection new.!

a do: [:a | a name]!

a do: [:a | self assert: a name].!

a do: [:a | self assert: a name]!
!CustomerBookTest methodsFor: 'testing' stamp: 'VPM 9/7/2019 11:47:21' prior: 50737275!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon previousActiveCustomers previousSuspendedCustomers |
			
	johnLennon := 'John Lennon'.
	customerBook := CustomerBook newWithActiveCustomerNamed: johnLennon.
	
	previousActiveCustomers  := customerBook activeCustomers.
	previousSuspendedCustomers  := customerBook suspendedCustomers.
	
	[ customerBook suspendCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = (previousActiveCustomers size + previousSuspendedCustomers size).
			previousActiveCustomers do: [:name | self assert: (customerBook includesCustomerNamed: name)].
			previousSuspendedCustomers do: [:name | self assert: (customerBook includesCustomerNamed: name)]. ]
! !
!CustomerBookTest methodsFor: 'helpers' stamp: 'VPM 9/7/2019 11:48:53' prior: 50737524!
check: aCustomerBook cannotSuspend: aCustomer
	| previousActiveCustomers previousSuspendedCustomers|
	
	previousActiveCustomers  := aCustomerBook activeCustomers.
	previousSuspendedCustomers  := aCustomerBook suspendedCustomers.
	
	[ aCustomerBook suspendCustomerNamed: aCustomer.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: aCustomerBook numberOfCustomers = (previousActiveCustomers size + previousSuspendedCustomers size).
			previousActiveCustomers do: [:name | self assert: (aCustomerBook includesCustomerNamed: name)].
			previousSuspendedCustomers do: [:name | self assert: (aCustomerBook includesCustomerNamed: name)]. ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'VPM 9/7/2019 11:50:19' prior: 50737549!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	johnLennon := 'John Lennon'.
	customerBook := CustomerBook newWithActiveCustomerNamed: johnLennon.
		
	self check: customerBook cannotSuspend: 'Paul McCartney'.
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'VPM 9/7/2019 11:51:04' prior: 50737290!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	johnLennon := 'John Lennon'.
	customerBook := CustomerBook newWithSuspendedCustomerNamed: johnLennon.
	
	self check: customerBook cannotSuspend: johnLennon.
! !

----SNAPSHOT----(7 September 2019 11:51:13) CuisUniversity-3839.image priorSource: 12985558!

----SNAPSHOT----(7 September 2019 11:51:17) CuisUniversity-3839.image priorSource: 12991090!
!CustomerBookTest methodsFor: 'helpers' stamp: 'VPM 9/7/2019 11:53:11'!
check: aCustomerBook cannotDo: aBlock withoutError: aTypeOfError
! !
!CustomerBookTest methodsFor: 'helpers' stamp: 'VPM 9/7/2019 11:54:45' prior: 50737628!
check: aCustomerBook cannotDo: aBlock withoutError: aTypeOfError
	| previousActiveCustomers previousSuspendedCustomers|
	
	previousActiveCustomers  := aCustomerBook activeCustomers.
	previousSuspendedCustomers  := aCustomerBook suspendedCustomers.
	
	[ aBlock value.
	self fail ]
		on: aTypeOfError 
		do: [ :anError | 
			self assert: aCustomerBook numberOfCustomers = (previousActiveCustomers size + previousSuspendedCustomers size).
			previousActiveCustomers do: [:name | self assert: (aCustomerBook includesCustomerNamed: name)].
			previousSuspendedCustomers do: [:name | self assert: (aCustomerBook includesCustomerNamed: name)]. ]! !
!CustomerBookTest methodsFor: 'helpers' stamp: 'VPM 9/7/2019 11:55:44' prior: 50737577!
check: aCustomerBook cannotSuspend: aCustomer

	self check: aCustomerBook cannotDo: [aCustomerBook suspendCustomerNamed: aCustomer] withoutError: CantSuspend.! !
!CustomerBookTest methodsFor: 'testing' stamp: 'VPM 9/7/2019 11:57:26' prior: 50737223!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
	
	johnLennon := 'John Lennon'.
	customerBook := CustomerBook newWithActiveCustomerNamed: johnLennon.
	
	self check: customerBook  cannotDo: [ customerBook removeCustomerNamed: 'Paul McCartney' ] withoutError: NotFound.! !
!CustomerBookTest methodsFor: 'helpers' stamp: 'VPM 9/7/2019 11:57:52' prior: 50737633!
check: aCustomerBook cannotDo: aBlock withoutError: aTypeOfError
	| previousActiveCustomers previousSuspendedCustomers|
	
	previousActiveCustomers  := aCustomerBook activeCustomers.
	previousSuspendedCustomers  := aCustomerBook suspendedCustomers.
	
	[ aBlock value.
	self fail ]
		on: aTypeOfError 
		do: [ :anError | 
			self assert: aCustomerBook numberOfCustomers = (previousActiveCustomers size + previousSuspendedCustomers size).
			previousActiveCustomers do: [:name | self assert: (aCustomerBook includesCustomerNamed: name)].
			previousSuspendedCustomers do: [:name | self assert: (aCustomerBook includesCustomerNamed: name)]. 
			^self. ]
	self fail.! !
!CustomerBookTest methodsFor: 'helpers' stamp: 'VPM 9/7/2019 11:58:43' prior: 50737676!
check: aCustomerBook cannotDo: aBlock withoutError: aTypeOfError
	| previousActiveCustomers previousSuspendedCustomers|
	
	previousActiveCustomers  := aCustomerBook activeCustomers.
	previousSuspendedCustomers  := aCustomerBook suspendedCustomers.
	
	[ aBlock value.
	self fail ]
		on: aTypeOfError 
		do: [ :anError | 
			self assert: aCustomerBook numberOfCustomers = (previousActiveCustomers size + previousSuspendedCustomers size).
			previousActiveCustomers do: [:name | self assert: (aCustomerBook includesCustomerNamed: name)].
			previousSuspendedCustomers do: [:name | self assert: (aCustomerBook includesCustomerNamed: name)]. 
			^self. ]
	fail.! !
!CustomerBookTest methodsFor: 'helpers' stamp: 'VPM 9/7/2019 12:00:25' prior: 50737700!
check: aCustomerBook cannotDo: aBlock withoutError: aTypeOfError
	| previousActiveCustomers previousSuspendedCustomers|
	
	previousActiveCustomers  := aCustomerBook activeCustomers.
	previousSuspendedCustomers  := aCustomerBook suspendedCustomers.
	
	[ aBlock value.
	self fail ]
		on: aTypeOfError 
		do: [ :anError | 
			self assert: aCustomerBook numberOfCustomers = (previousActiveCustomers size + previousSuspendedCustomers size).
			previousActiveCustomers do: [:name | self assert: (aCustomerBook includesCustomerNamed: name)].
			previousSuspendedCustomers do: [:name | self assert: (aCustomerBook includesCustomerNamed: name)]. 
			^self. ].
	self fail.! !
!CustomerBookTest methodsFor: 'helpers' stamp: 'VPM 9/7/2019 12:00:40' prior: 50737724!
check: aCustomerBook cannotDo: aBlock withoutError: aTypeOfError
	| previousActiveCustomers previousSuspendedCustomers|
	
	previousActiveCustomers  := aCustomerBook activeCustomers.
	previousSuspendedCustomers  := aCustomerBook suspendedCustomers.
	
	[ aBlock value.
	self fail ]
		on: aTypeOfError 
		do: [ :anError | 
			self assert: aCustomerBook numberOfCustomers = (previousActiveCustomers size + previousSuspendedCustomers size).
			previousActiveCustomers do: [:name | self assert: (aCustomerBook includesCustomerNamed: name)].
			previousSuspendedCustomers do: [:name | self assert: (aCustomerBook includesCustomerNamed: name)]. 
			^self. ].
	self assert: True = False.! !
!CustomerBookTest methodsFor: 'helpers' stamp: 'VPM 9/7/2019 12:00:53' prior: 50737748!
check: aCustomerBook cannotDo: aBlock withoutError: aTypeOfError
	| previousActiveCustomers previousSuspendedCustomers|
	
	previousActiveCustomers  := aCustomerBook activeCustomers.
	previousSuspendedCustomers  := aCustomerBook suspendedCustomers.
	
	[ aBlock value.
	self fail ]
		on: aTypeOfError 
		do: [ :anError | 
			self assert: aCustomerBook numberOfCustomers = (previousActiveCustomers size + previousSuspendedCustomers size).
			previousActiveCustomers do: [:name | self assert: (aCustomerBook includesCustomerNamed: name)].
			previousSuspendedCustomers do: [:name | self assert: (aCustomerBook includesCustomerNamed: name)]. 
			^self. ].
	self fail.! !
!CustomerBook methodsFor: 'customer management' stamp: 'VPM 9/7/2019 12:01:22' prior: 50737401!
suspendCustomerNamed: aName 
	
	(active includes: aName) ifFalse: [^NotFound signal].
	
	active remove: aName.
	
	suspended add: aName
! !
!CustomerBook methodsFor: 'customer management' stamp: 'VPM 9/7/2019 12:01:34' prior: 50737797!
suspendCustomerNamed: aName 
	
	(active includes: aName) ifFalse: [^CantSuspend signal].
	
	active remove: aName.
	
	suspended add: aName
! !

----SNAPSHOT----(7 September 2019 12:01:49) CuisUniversity-3839.image priorSource: 12991184!

----QUIT----(7 September 2019 12:01:54) CuisUniversity-3839.image priorSource: 12997165!

----STARTUP---- (9 September 2019 21:09:17) as /home/valchu/Documents/UBA/cuis/CuisUniversity-3839.image!


----End fileIn of /home/valchu/Documents/UBA/2019-2c/19-Numeros/Pre-Numero-Ejercicio.st----!

----QUIT----(10 September 2019 11:17:50) CuisUniversity-3839.image priorSource: 12997259!

----STARTUP---- (16 September 2019 19:05:14) as /home/valchu/Documents/UBA/cuis/CuisUniversity-3839.image!


----End fileIn of /home/valchu/Documents/UBA/2019-2c/20-Stack/Stack-Exercise.st----!

Object subclass: #OOStack
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: #'Stack-Exercise'!
Object subclass: #OOStack
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'nil' stamp: 'VPM 9/16/2019 19:13:06'!
initialize
	elements  := LinkedList new.! !
!OOStack methodsFor: 'nil' stamp: 'VPM 9/16/2019 19:14:14'!
isEmpty
	^ elements isEmpty.! !
!OOStack methodsFor: 'nil' stamp: 'VPM 9/16/2019 19:15:36'!
push: anElement
	elements add: anElement.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:16:02' prior: 50738326!
push: anElement
	elements addFirst: anElement.! !
!OOStack methodsFor: 'nil' stamp: 'VPM 9/16/2019 19:16:15'!
pop
	elements removeFirst.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:18:33' prior: 50738331!
push: anElement
	elements add: anElement.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:18:49' prior: 50738335!
pop
	elements removeLast.! !

a := LinkedList new.!

a addFirst: 1!

a isEmpty!

a add: 1!

a!

a!

a removeLast!

.
a add: 2!

a!

a add: 1.!

a!

self add: 1!
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:25:33' prior: 50738319!
initialize
	elements  := OrderedCollection new.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:25:44' prior: 50738323!
isEmpty
	^ elements size = 0.! !
!OOStack methodsFor: 'nil' stamp: 'VPM 9/16/2019 19:27:16'!
top
	^ elements at: elements size - 1.! !

elements at: 0!

elements size!
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:29:22' prior: 50738360!
top
	^ elements at: elements size.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:30:03' prior: 50738344!
pop
	| tempElement |
	tempElement := self top.
	elements removeLast.
	^ tempElement .! !
!OOStack methodsFor: 'nil' stamp: 'VPM 9/16/2019 19:30:40'!
size
	^ elements size.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:40:42' prior: 50738366!
top
	elements size = 0 ifTrue: [ self error: self class stackEmptyErrorDescription ].
	^ elements at: elements size.! !

----SNAPSHOT----(16 September 2019 19:40:51) CuisUniversity-3839.image priorSource: 13007933!
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:43:34' prior: 50738380!
top
	self isEmpty ifTrue: [ self error: self class stackEmptyErrorDescription ].
	^ elements at: elements size.! !

Object subclass: #OOEmptyStack
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOEmptyStack category: #'Stack-Exercise'!
Object subclass: #OOEmptyStack
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOEmptyStack class
	instanceVariableNames: ''!

!classDefinition: 'OOEmptyStack class' category: #'Stack-Exercise'!
OOEmptyStack class
	instanceVariableNames: ''!
!OOEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:52:39'!
initialize
	elements  := OrderedCollection new.! !
!OOEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:52:39'!
isEmpty
	^ elements size = 0.! !
!OOEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:52:39'!
pop
	| tempElement |
	tempElement := self top.
	elements removeLast.
	^ tempElement .! !
!OOEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:52:39'!
push: anElement
	elements add: anElement.! !
!OOEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:52:39'!
size
	^ elements size.! !
!OOEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:52:39'!
top
	self isEmpty ifTrue: [ self error: self class stackEmptyErrorDescription ].
	^ elements at: elements size.! !
!OOEmptyStack class methodsFor: 'error descriptions' stamp: 'VPM 9/16/2019 19:52:39'!
stackEmptyErrorDescription
	
	^ 'Stack is empty'! !

Object subclass: #OOEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOEmptyStack category: #'Stack-Exercise'!
Object subclass: #OOEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:53:10' prior: 50738418!
isEmpty
	^true.! !
!OOEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:54:04' prior: 50738422!
pop
	^self top.! !
!OOEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:54:06' prior: 50738462!
pop
	^ self top.! !
!OOEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:54:15' prior: 50738432!
size
	^ 0! !
!OOEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:54:26' prior: 50738436!
top
	self error: self class stackEmptyErrorDescription! !

Object subclass: #OONotEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OONotEmptyStack category: #'Stack-Exercise'!
Object subclass: #OONotEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OONotEmptyStack class
	instanceVariableNames: ''!

!classDefinition: 'OONotEmptyStack class' category: #'Stack-Exercise'!
OONotEmptyStack class
	instanceVariableNames: ''!
!OONotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:54:43'!
initialize
	elements  := OrderedCollection new.! !
!OONotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:54:43'!
isEmpty
	^true.! !
!OONotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:54:43'!
pop
	^ self top.! !
!OONotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:54:43'!
push: anElement
	elements add: anElement.! !
!OONotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:54:43'!
size
	^ 0! !
!OONotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:54:43'!
top
	self error: self class stackEmptyErrorDescription! !
!OONotEmptyStack class methodsFor: 'error descriptions' stamp: 'VPM 9/16/2019 19:54:43'!
stackEmptyErrorDescription
	
	^ 'Stack is empty'! !

Smalltalk removeClassNamed: #OONotEmptyStack!

Object subclass: #OONotEmptyStack
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OONotEmptyStack category: #'Stack-Exercise'!
Object subclass: #OONotEmptyStack
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OONotEmptyStack class
	instanceVariableNames: ''!

!classDefinition: 'OONotEmptyStack class' category: #'Stack-Exercise'!
OONotEmptyStack class
	instanceVariableNames: ''!
!OONotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:55:12'!
initialize
	elements  := OrderedCollection new.! !
!OONotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:55:12'!
isEmpty
	^ elements size = 0.! !
!OONotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:55:12'!
pop
	| tempElement |
	tempElement := self top.
	elements removeLast.
	^ tempElement .! !
!OONotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:55:12'!
push: anElement
	elements add: anElement.! !
!OONotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:55:12'!
size
	^ elements size.! !
!OONotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:55:12'!
top
	self isEmpty ifTrue: [ self error: self class stackEmptyErrorDescription ].
	^ elements at: elements size.! !
!OONotEmptyStack class methodsFor: 'error descriptions' stamp: 'VPM 9/16/2019 19:55:12'!
stackEmptyErrorDescription
	
	^ 'Stack is empty'! !
!OONotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:55:25' prior: 50738550!
isEmpty
	^ false.! !
!OOEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:56:28' prior: 50738428!
push: anElement
	^ OONotEmptyStack new push: anElement.! !
!OONotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:58:13' prior: 50738554!
pop
	elements removeLast.
	elements size = 0 ifTrue: [^ OOEmptyStack new ].
	^ self.! !
!OONotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:58:22' prior: 50738569!
top
	^ elements at: elements size.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:59:18' prior: 50738371!
pop
	| tempElem |
	tempElem := elements top.
	elements := elements pop.
	^ tempElem.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:59:37' prior: 50738339!
push: anElement
	elements := elements add: anElement.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 19:59:46' prior: 50738390!
top
	^ elements top.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:00:06' prior: 50738357!
isEmpty
	^ elements isEmpty.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:00:16' prior: 50738352!
initialize
	elements  := OOEmptyStack new.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:00:45' prior: 50738607!
push: anElement
	elements := elements push: anElement.! !
!OOEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:10:57' prior: 50738585!
push: anElement
	^ NotEmptyStack new push: anElement.! !

Object subclass: #OOStack
	instanceVariableNames: 'elements typeOfStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: #'Stack-Exercise'!
Object subclass: #OOStack
	instanceVariableNames: 'elements typeOfStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:20:13' prior: 50738620!
initialize
	elements := OrderedCollection new.
	typeOfStack  := OOEmptyStack new.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:21:40' prior: 50738616!
isEmpty
	^ typeOfStack isEmpty.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:23:39' prior: 50738625!
push: anElement
	typeOfStack push: anElement.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:27:05' prior: 50738656!
push: anElement
	typeOfStack  := NotEmptyStack new.
	typeOfStack push: self with: anElement
	
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:30:44' prior: 50738661!
push: anElement
	typeOfStack  := NotEmptyStack new.
	typeOfStack push: self with: anElement.
	
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:31:17' prior: 50738612!
top
	^ elements top.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:31:33' prior: 50738667!
push: anElement
	typeOfStack  := NotEmptyStack new.
	^typeOfStack push: self with: anElement.
	
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:31:39' prior: 50738677!
push: anElement
	typeOfStack  := NotEmptyStack new.
	typeOfStack push: self with: anElement.
	
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:33:35' prior: 50738601!
pop
	| tempElem |
	tempElem := elements at: elements size.
	elements := elements pop.
	^ tempElem.! !

OOEmptyStack removeSelector: #initialize!

OOEmptyStack removeSelector: #push:!

Object subclass: #NotEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NotEmptyStack category: #'Stack-Exercise'!
Object subclass: #NotEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

NotEmptyStack removeSelector: #initialize!

NotEmptyStack removeSelector: #size!

OOEmptyStack removeSelector: #size!
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:37:54' prior: 50738684!
push: anElement
	typeOfStack  := NotEmptyStack new.
	typeOfStack push: anElement on: self.
	
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:39:39' prior: 50738713!
push: anElement
	typeOfStack  := NotEmptyStack new.
	elements add: anElement.
	
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:40:58' prior: 50738690!
pop
	| tempElem |
	tempElem := elements at: elements size.
	typeOfStack pop.
	^ tempElem.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:41:46' prior: 50738725!
pop
	| tempElem |
	tempElem := elements at: elements size.
	typeOfStack popOn: self.
	^ tempElem.! !
!OOEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:42:29'!
popOn: aStack
	^ aStack error: aStack ! !
!OOEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:42:46' prior: 50738737!
popOn: aStack
	^ aStack error: aStack class stackEmptyErrorDescription! !
!OOEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:42:47' prior: 50738742!
popOn: aStack
	^ aStack error: aStack class stackEmptyErrorDescription.! !

OOEmptyStack removeSelector: #pop!
!OOEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:43:28'!
topOn: aStack
	^ aStack error: aStack class stackEmptyErrorDescription.! !

OOEmptyStack removeSelector: #top!
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:44:10' prior: 50738673!
top
	^ typeOfStack topOn: self! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:44:11' prior: 50738761!
top
	^ typeOfStack topOn: self.! !

NotEmptyStack removeSelector: #pop!

NotEmptyStack removeSelector: #top!
!OOEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:45:27' prior: 50738754!
topOn: aStack
	^ self popOn: aStack.! !

NotEmptyStack removeSelector: #push:!
!NotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:48:10'!
popOn: aStack
	aStack size = 0 ifTrue: [aStack becomeEmpty].
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:50:06'!
becomeEmpty
	typeOfStack := OOEmptyStack new.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:50:46' prior: 50738731!
pop
	| tempElem |
	tempElem := elements at: elements size.
	elements removeLast.
	typeOfStack popOn: self.
	^ tempElem.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:52:05'!
elements
	^ self elements.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:52:37' prior: 50738788!
pop
	| tempElem |
	tempElem := elements at: elements size.
	^ typeOfStack popOn: self.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:52:46' prior: 50738799!
pop
	^ typeOfStack popOn: self.! !
!NotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:54:07' prior: 50738778!
popOn: aStack
	|tempElem|
	
	tempElem := aStack elements at: aStack size.
	aStack size = 0 ifTrue: [aStack becomeEmpty].
	! !
!NotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:54:35' prior: 50738810!
popOn: aStack
	|tempElem|
	
	tempElem := aStack elements at: aStack size.
	aStack size = 0 ifTrue: [aStack becomeEmpty].
	^ tempElem.
	! !
!NotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:55:40' prior: 50738817!
popOn: aStack
	|tempElem|
	
	tempElem := aStack elements at: aStack size.
	aStack removeLast.
	aStack size = 0 ifTrue: [aStack becomeEmpty].
	^ tempElem.
	! !
!NotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:55:50' prior: 50738825!
popOn: aStack
	|tempElem|
	
	tempElem := aStack elements at: aStack size.
	aStack elements removeLast.
	aStack size = 0 ifTrue: [aStack becomeEmpty].
	^ tempElem.
	! !
!NotEmptyStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:57:48'!
topOn: aStack
	^ aStack elements at: aStack size.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:58:11' prior: 50738795!
elements
	^ elements.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:59:36' prior: 50738783!
becomeEmpty
	typeOfStack := EmptyStackType new.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 20:59:36' prior: 50738646!
initialize
	elements := OrderedCollection new.
	typeOfStack  := EmptyStackType new.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 21:00:04' prior: 50738719!
push: anElement
	typeOfStack  := NotEmptyStackType new.
	elements add: anElement.
	
	! !
!NotEmptyStackType methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 21:37:34' prior: 50738834!
popOn: aStack
	|tempElem|
	
	tempElem := aStack top.
	aStack elements removeLast.
	aStack size = 0 ifTrue: [aStack becomeEmpty].
	^ tempElem.
	! !
!NotEmptyStackType methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 21:39:05' prior: 50738868!
popOn: aStack
	|tempElem|
	
	tempElem := aStack top.
	aStack elements removeLast.
	^ tempElem.
	! !
!NotEmptyStackType methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 21:43:02' prior: 50738876!
popOn: aStack
	|tempElem|
	
	tempElem := aStack elements at: aStack size.
	aStack elements removeLast.
	^ tempElem.
	! !
!NotEmptyStackType methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 21:43:41' prior: 50738883!
popOn: aStack
	|tempElem|
	
	tempElem := aStack elements at: aStack size.
	aStack elements removeLast.
	aStack size = 0 ifTrue: [aStack becomeEmpty]
	^ tempElem.
	! !
!NotEmptyStackType methodsFor: 'as yet unclassified' stamp: 'VPM 9/16/2019 21:43:43' prior: 50738890!
popOn: aStack
	|tempElem|
	
	tempElem := aStack elements at: aStack size.
	aStack elements removeLast.
	aStack size = 0 ifTrue: [aStack becomeEmpty].
	^ tempElem.
	! !

----QUIT----(16 September 2019 21:49:22) CuisUniversity-3839.image priorSource: 13015543!

----STARTUP---- (17 September 2019 19:29:21) as /home/valchu/Documents/UBA/cuis/CuisUniversity-3839.image!


----End fileIn of /home/valchu/Documents/UBA/2019-2c/19-Numeros/Numero-Solution-4.st----!

----QUIT----(17 September 2019 19:31:03) CuisUniversity-3839.image priorSource: 13032199!

----STARTUP---- (17 September 2019 19:31:47) as /home/valchu/Documents/UBA/cuis/CuisUniversity-3839.image!


----End fileIn of /home/valchu/Documents/UBA/2019-2c/19-Numeros/Numero-Solution-3.6.st----!

----QUIT----(17 September 2019 19:33:13) CuisUniversity-3839.image priorSource: 13083752!

----STARTUP---- (18 September 2019 13:50:18) as /home/valchu/Documents/UBA/cuis/CuisUniversity-3839.image!


Object subclass: #EmptyStackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #EmptyStackElement category: #'Stack-Exercise'!
Object subclass: #EmptyStackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #StackElement
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackElement category: #'Stack-Exercise'!
Object subclass: #StackElement
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOStack
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: #'Stack-Exercise'!
Object subclass: #OOStack
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

a := LinkedList new.!

a add: 'Hola'!

st new.
a add: 'Hola'.
a add: 'Chau'!

.
a add: 'Chau'!

a add: 'Chau'!

a!

a add: 'Chau'!

a!

a!

a add: 'Chau'!

----STARTUP---- (22 September 2019 11:13:40) as /home/valchu/Documents/UBA/cuis/CuisUniversity-3839.image!


----STARTUP---- (23 September 2019 19:25:41) as /home/valchu/Documents/UBA/cuis/CuisUniversity-3839.image!


----End fileIn of /home/valchu/Downloads/IngSof1-2019-2C-1Parcial(1).st----!

----QUIT----(23 September 2019 19:26:08) CuisUniversity-3839.image priorSource: 13128615!

----STARTUP---- (30 September 2019 14:46:29) as /home/valchu/Documents/UBA/cuis/CuisUniversity-3839.image!


----STARTUP---- (9 October 2019 11:59:51) as /home/valchu/Documents/UBA/cuis/CuisUniversity-3839.image!


Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Object subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: #MarsRover!
Object subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'VPM 10/9/2019 12:04:06'!
testMovesOneForward
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 12:04:26'!
testMovesOneBackwards
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 12:04:39'!
testMovesOneLeft
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 12:04:45'!
testMovesOneRight
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 12:06:01'!
testRotatesOneRight
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 12:06:10'!
testRotatesOneLeft
	! !
!MarsRoverTest methodsFor: 'Full turns' stamp: 'VPM 10/9/2019 12:07:56'!
testFullTurnClockwiseFromNorth! !
!MarsRoverTest methodsFor: 'Full turns' stamp: 'VPM 10/9/2019 12:07:59'!
testFullTurnClockwiseFromEast! !
!MarsRoverTest methodsFor: 'Full turns' stamp: 'VPM 10/9/2019 12:08:19'!
testFullTurnClockwiseFromWest! !
!MarsRoverTest methodsFor: 'Full turns' stamp: 'VPM 10/9/2019 12:08:23'!
testFullTurnClockwiseFromSouth! !
!MarsRoverTest methodsFor: 'Full turns' stamp: 'VPM 10/9/2019 12:08:36'!
testHalfTurnClockwiseFromEast! !
!MarsRoverTest methodsFor: 'Full turns' stamp: 'VPM 10/9/2019 12:08:50'!
testHalfTurnClockwiseFromWest! !
!MarsRoverTest methodsFor: 'Full turns' stamp: 'VPM 10/9/2019 12:09:00'!
testHalfTurnClockwiseFromSouth! !
!MarsRoverTest methodsFor: 'Full turns' stamp: 'VPM 10/9/2019 12:09:09'!
testHalfTurnClockwiseFromNorth! !
!MarsRoverTest methodsFor: 'Basic rotations' stamp: 'VPM 10/9/2019 12:09:28'!
testRotatesLeft
	! !
!MarsRoverTest methodsFor: 'Basic rotations' stamp: 'VPM 10/9/2019 12:09:32'!
testRotatesRight
	! !

MarsRoverTest removeSelector: #testRotatesOneRight!

MarsRoverTest removeSelector: #testRotatesOneLeft!

1 @ 1 + 2 @ 2!

(1 @ 1) + (2 @ 2)!

Object subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: #MarsRover!
Object subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: #MarsRover!
Object subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'Basic rotations' stamp: 'VPM 10/9/2019 12:14:29' prior: 50742749!
testRotatesLeft

	| rover |
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'l'.
	
	self assert: rover at = 1@1.
	self assert: rover oriented = East! !
!MarsRoverTest methodsFor: 'Basic rotations' stamp: 'VPM 10/9/2019 12:15:05' prior: 50742776!
testRotatesLeft

	| rover |
	
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'l'.
	
	self assert: rover at = 1@1.
	self assert: rover oriented = East! !

----STARTUP---- (9 October 2019 12:16:13) as /home/valchu/Documents/UBA/cuis/CuisUniversity-3839.image!


Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Object subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: #MarsRover!
Object subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Object subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: #MarsRover!
Object subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Object subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: #MarsRover!
Object subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Object subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: #MarsRover!
Object subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Object subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: #MarsRover!
Object subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!West class methodsFor: 'nil' stamp: 'VPM 10/9/2019 12:18:10'!
left
	^ South! !
!West class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 12:18:22'!
right
	^ North! !
!South class methodsFor: 'nil' stamp: 'VPM 10/9/2019 12:18:45'!
left
	^ East! !
!South class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 12:18:54'!
right
	^ West! !
!North class methodsFor: 'nil' stamp: 'VPM 10/9/2019 12:19:09'!
left
	^ West! !
!North class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 12:19:15'!
right
	^ East! !
!East class methodsFor: 'nil' stamp: 'VPM 10/9/2019 12:19:38'!
left
	^ North! !
!East class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 12:19:46'!
right
	^ South! !
!MarsRoverTest class methodsFor: 'cardinal' stamp: 'VPM 10/9/2019 12:20:47'!
testLeftOfNorthIsWest
	
	self assert: North left = West! !

MarsRoverTest class removeSelector: #testLeftOfNorthIsWest!
!MarsRoverTest methodsFor: 'cardinal' stamp: 'VPM 10/9/2019 12:21:36'!
testLeftOfNorthIsWest

	self assert: North left = West! !

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: #MarsRover!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:23:17'!
testLeftOfWestIsSouth

	self assert: North left = West! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:23:26' prior: 50742774!
testLeftOfWestIsSouth

	self assert: West left = South! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:23:49'!
testLeftOfSouthIsEast

	self assert: South left = East! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:24:10'!
testLeftOfEastIsNorth

	self assert: East left = North! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:24:34'!
testRightOfEastIsSouth

	self assert: East left = South! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:24:55'!
testRightOfSouthIsWest

	self assert: South left = West! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:25:12'!
testRightOfWestIsNorth

	self assert: West left = North! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:25:36'!
testRightOfNorthIsEast

	self assert: North left = East! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:25:50' prior: 50742794!
testRightOfEastIsSouth

	self assert: East right = South! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:26:00' prior: 50742809!
testRightOfNorthIsEast

	self assert: North right = East! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:26:05' prior: 50742799!
testRightOfSouthIsWest

	self assert: South right = West! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:26:21' prior: 50742804!
testRightOfWestIsNorth

	self assert: West right = North! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:26:48' prior: 50742789!
testLeftOfEastIsNorth

	self assert: East left equals: North! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:26:56' prior: 50742759!
testLeftOfNorthIsWest

	self assert: North left equals: West! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:27:03' prior: 50742784!
testLeftOfSouthIsEast

	self assert: South left equals: East! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:27:10' prior: 50742779!
testLeftOfWestIsSouth

	self assert: West left equals: South! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:27:17' prior: 50742814!
testRightOfEastIsSouth

	self assert: East right equals: South! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:27:23' prior: 50742819!
testRightOfNorthIsEast

	self assert: North right equals: East! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:27:30' prior: 50742824!
testRightOfSouthIsWest

	self assert: South right equals: West! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 12:27:37' prior: 50742829!
testRightOfWestIsNorth

	self assert: West right equals: North! !
!MarsRoverTest methodsFor: 'tests - initialization' stamp: 'VPM 10/9/2019 12:29:42'!
testGoodStart
	
	| rover |
	rover := MarsRover startAt: 1@1 oriented: North.
	
	self assert: rover at equals: 1@1.
	self assert: rover oriented equals: North.! !
!MarsRoverTest methodsFor: 'tests - initialization' stamp: 'VPM 10/9/2019 12:31:07'!
testRotatesToEast
	
	| rover |
	rover := MarsRover startAt: 1@1 oriented: North.
	
	self assert: rover at equals: 1@1.
	self assert: rover oriented equals: North.! !
!MarsRoverTest methodsFor: 'tests - initialization' stamp: 'VPM 10/9/2019 12:31:36' prior: 50742885!
testRotatesToEast
	
	| rover |
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'r'.
	
	self assert: rover at equals: 1@1.
	self assert: rover oriented equals: East.! !
!MarsRoverTest methodsFor: 'tests - initialization' stamp: 'VPM 10/9/2019 12:31:40' prior: 50742894!
testRotatesToEast
	
	| rover |
	
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'r'.
	
	self assert: rover at equals: 1@1.
	self assert: rover oriented equals: East.! !
!MarsRoverTest methodsFor: 'tests - initialization' stamp: 'VPM 10/9/2019 12:31:55'!
testRotatesToSouth
	
	| rover |
	
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'r'.
	
	self assert: rover at equals: 1@1.
	self assert: rover oriented equals: East.! !
!MarsRoverTest methodsFor: 'tests - initialization' stamp: 'VPM 10/9/2019 12:32:01' prior: 50742912!
testRotatesToSouth
	
	| rover |
	
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'rr'.
	
	self assert: rover at equals: 1@1.
	self assert: rover oriented equals: South.! !
!MarsRoverTest methodsFor: 'tests - initialization' stamp: 'VPM 10/9/2019 12:33:11'!
testRotatesRightToWest
	
	| rover |
	
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'rr'.
	
	self assert: rover at equals: 1@1.
	self assert: rover oriented equals: South.! !
!MarsRoverTest methodsFor: 'tests - initialization' stamp: 'VPM 10/9/2019 12:33:19' prior: 50742930!
testRotatesRightToWest
	
	| rover |
	
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'rrr'.
	
	self assert: rover at equals: 1@1.
	self assert: rover oriented equals: West.! !
!MarsRoverTest methodsFor: 'tests - initialization' stamp: 'VPM 10/9/2019 12:33:25'!
testRotatesRightToEast
	
	| rover |
	
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'r'.
	
	self assert: rover at equals: 1@1.
	self assert: rover oriented equals: East.! !
!MarsRoverTest methodsFor: 'tests - initialization' stamp: 'VPM 10/9/2019 12:33:31'!
testRotatesRightToSouth
	
	| rover |
	
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'rr'.
	
	self assert: rover at equals: 1@1.
	self assert: rover oriented equals: South.! !
!MarsRoverTest methodsFor: 'tests - initialization' stamp: 'VPM 10/9/2019 12:33:43'!
testRotatesLeftToEast
	
	| rover |
	
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'l'.
	
	self assert: rover at equals: 1@1.
	self assert: rover oriented equals: East.! !
!MarsRoverTest methodsFor: 'tests - initialization' stamp: 'VPM 10/9/2019 12:33:49' prior: 50742967!
testRotatesLeftToEast
	
	| rover |
	
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'lll'.
	
	self assert: rover at equals: 1@1.
	self assert: rover oriented equals: East.! !
!MarsRoverTest methodsFor: 'tests - initialization' stamp: 'VPM 10/9/2019 12:34:01'!
testRotatesLeftToSouth
	
	| rover |
	
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'll'.
	
	self assert: rover at equals: 1@1.
	self assert: rover oriented equals: South.! !
!MarsRoverTest methodsFor: 'tests - initialization' stamp: 'VPM 10/9/2019 12:34:10'!
testRotatesLeftToWest
	
	| rover |
	
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'rrr'.
	
	self assert: rover at equals: 1@1.
	self assert: rover oriented equals: West.! !
!MarsRoverTest methodsFor: 'tests - initialization' stamp: 'VPM 10/9/2019 12:34:15' prior: 50742995!
testRotatesLeftToWest
	
	| rover |
	
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'l'.
	
	self assert: rover at equals: 1@1.
	self assert: rover oriented equals: West.! !

MarsRoverTest removeSelector: #testRotatesToEast!

MarsRoverTest removeSelector: #testRotatesToSouth!
!MarsRoverTest methodsFor: 'Basic moves' stamp: 'VPM 10/9/2019 13:12:51'!
testMovesOneNorth

	| rover |
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'f'.
	
	self assert: rover at equals: 1@0.
	self assert: rover orientation equals: North! !
!MarsRoverTest methodsFor: 'Basic moves' stamp: 'VPM 10/9/2019 13:12:58' prior: 50743017!
testMovesOneNorth

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'f'.
	
	self assert: rover at equals: 1@0.
	self assert: rover orientation equals: North! !
!MarsRoverTest methodsFor: 'Basic moves' stamp: 'VPM 10/9/2019 13:13:23'!
testMovesOneSouthNotRotating

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'f'.
	
	self assert: rover at equals: 1@0.
	self assert: rover orientation equals: North! !
!MarsRoverTest methodsFor: 'Basic moves' stamp: 'VPM 10/9/2019 13:13:31'!
testMovesOneNorthNotRotating

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'f'.
	
	self assert: rover at equals: 1@0.
	self assert: rover orientation equals: North! !

MarsRoverTest removeSelector: #testMovesOneNorth!
!MarsRoverTest methodsFor: 'Basic moves' stamp: 'VPM 10/9/2019 13:14:02' prior: 50743035!
testMovesOneSouthNotRotating

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'b'.
	
	self assert: rover at equals: -1@0.
	self assert: rover orientation equals: North! !
!MarsRoverTest methodsFor: 'Basic moves' stamp: 'VPM 10/9/2019 13:14:15' prior: 50743055!
testMovesOneSouthNotRotating

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'b'.
	
	self assert: rover at equals: 0@-1.
	self assert: rover orientation equals: North! !
!MarsRoverTest methodsFor: 'Basic moves' stamp: 'VPM 10/9/2019 13:14:22' prior: 50743044!
testMovesOneNorthNotRotating

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'f'.
	
	self assert: rover at equals: 0@1.
	self assert: rover orientation equals: North! !
!MarsRoverTest methodsFor: 'Basic moves' stamp: 'VPM 10/9/2019 13:16:06'!
testMovesOneNorthRotatingLeft

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'f'.
	
	self assert: rover at equals: 0@1.
	self assert: rover orientation equals: North! !
!MarsRoverTest methodsFor: 'Basic moves' stamp: 'VPM 10/9/2019 13:16:20'!
testMovesOneNorthAfterRotatingLeft

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'f'.
	
	self assert: rover at equals: 0@1.
	self assert: rover orientation equals: North! !
!MarsRoverTest methodsFor: 'Basic moves' stamp: 'VPM 10/9/2019 13:16:31' prior: 50743093!
testMovesOneNorthAfterRotatingLeft

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'llb'.
	
	self assert: rover at equals: 0@1.
	self assert: rover orientation equals: South! !
!MarsRoverTest methodsFor: 'Basic moves' stamp: 'VPM 10/9/2019 13:16:49'!
testMovesOneNorthAfterRotatingRight

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'llb'.
	
	self assert: rover at equals: 0@1.
	self assert: rover orientation equals: South! !
!MarsRoverTest methodsFor: 'Basic moves' stamp: 'VPM 10/9/2019 13:16:56' prior: 50743112!
testMovesOneNorthAfterRotatingRight

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'rrb'.
	
	self assert: rover at equals: 0@1.
	self assert: rover orientation equals: South! !

MarsRoverTest removeSelector: #testMovesOneNorthAfterRotatingRight!
!MarsRoverTest methodsFor: 'Basic moves' stamp: 'VPM 10/9/2019 13:17:32'!
testMovesOneNorthAfterRotatingRight

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'f'.
	
	self assert: rover at equals: 0@1.
	self assert: rover orientation equals: North! !
!MarsRoverTest methodsFor: 'Basic moves' stamp: 'VPM 10/9/2019 13:17:40' prior: 50743133!
testMovesOneNorthAfterRotatingRight

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'rrb'.
	
	self assert: rover at equals: 0@1.
	self assert: rover orientation equals: South! !

MarsRoverTest removeSelector: #testMovesOneNorthRotatingLeft!
!MarsRoverTest methodsFor: 'Basic moves' stamp: 'VPM 10/9/2019 13:18:13'!
testMovesOneSouthAfterRotatingLeft

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'b'.
	
	self assert: rover at equals: 0@-1.
	self assert: rover orientation equals: North! !
!MarsRoverTest methodsFor: 'Basic moves' stamp: 'VPM 10/9/2019 13:18:21' prior: 50743154!
testMovesOneSouthAfterRotatingLeft

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'llb'.
	
	self assert: rover at equals: 0@-1.
	self assert: rover orientation equals: South! !
!MarsRoverTest methodsFor: 'Basic moves' stamp: 'VPM 10/9/2019 13:18:28' prior: 50743164!
testMovesOneSouthAfterRotatingLeft

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'llf'.
	
	self assert: rover at equals: 0@-1.
	self assert: rover orientation equals: South! !
!MarsRoverTest methodsFor: 'Basic moves' stamp: 'VPM 10/9/2019 13:18:49'!
testMovesOneSouthAfterRotatingRight

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'llf'.
	
	self assert: rover at equals: 0@-1.
	self assert: rover orientation equals: South! !
!MarsRoverTest methodsFor: 'Basic moves' stamp: 'VPM 10/9/2019 13:18:57' prior: 50743183!
testMovesOneSouthAfterRotatingRight

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'rrf'.
	
	self assert: rover at equals: 0@-1.
	self assert: rover orientation equals: South! !

----End fileIn of /home/valchu/Documents/UBA/cuis/MarsRover - expanded.st----!

----End fileIn of /home/valchu/Documents/UBA/cuis/MarsRover.st----!
!MarsRoverTest methodsFor: 'Basic moves - from North' stamp: 'VPM 10/9/2019 13:27:36'!
testMovesOneNorthAfterRotatingLeftFromNorth

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'llb'.
	
	self assert: rover at equals: 0@1.
	self assert: rover orientation equals: South! !
!MarsRoverTest methodsFor: 'Basic moves - from North' stamp: 'VPM 10/9/2019 13:27:46'!
testMovesOneNorthAfterRotatingLeftFromSouth

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'llb'.
	
	self assert: rover at equals: 0@1.
	self assert: rover orientation equals: South! !

MarsRoverTest removeSelector: #testMovesOneNorthAfterRotatingLeftFromNorth!

MarsRoverTest removeSelector: #testMovesOneNorthAfterRotatingLeftFromSouth!
!MarsRoverTest methodsFor: 'Basic moves - from North' stamp: 'VPM 10/9/2019 13:28:49'!
testMovesOneEastNotRotating

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'f'.
	
	self assert: rover at equals: 0@1.
	self assert: rover orientation equals: North! !
!MarsRoverTest methodsFor: 'Basic moves - from North' stamp: 'VPM 10/9/2019 13:30:01' prior: 50743850!
testMovesOneEastNotRotating

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: East.
	
	rover do: 'f'.
	
	self assert: rover at equals: 1@0.
	self assert: rover orientation equals: East! !
!MarsRoverTest methodsFor: 'Basic moves - from North' stamp: 'VPM 10/9/2019 13:30:17'!
testMovesOneEastAfterRotatingLeft

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: East.
	
	rover do: 'llb'.
	
	self assert: rover at equals: 0@1.
	self assert: rover orientation equals: South! !
!MarsRoverTest methodsFor: 'Basic moves - from North' stamp: 'VPM 10/9/2019 13:30:44' prior: 50743869!
testMovesOneEastAfterRotatingLeft

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: East.
	
	rover do: 'llb'.
	
	self assert: rover at equals: 1@0.
	self assert: rover orientation equals: West! !
!MarsRoverTest methodsFor: 'Basic moves - from North' stamp: 'VPM 10/9/2019 13:31:07'!
testMovesOneEastAfterRotatingRight

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: East.
	
	rover do: 'rrb'.
	
	self assert: rover at equals: 1@0.
	self assert: rover orientation equals: West! !
!MarsRoverTest methodsFor: 'Basic moves - from North' stamp: 'VPM 10/9/2019 13:31:17'!
testMovesOneWestNotRotating

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: North.
	
	rover do: 'b'.
	
	self assert: rover at equals: 0@-1.
	self assert: rover orientation equals: North! !
!MarsRoverTest methodsFor: 'Basic moves - from North' stamp: 'VPM 10/9/2019 13:31:29' prior: 50743899!
testMovesOneWestNotRotating

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: East.
	
	rover do: 'b'.
	
	self assert: rover at equals: -1@0.
	self assert: rover orientation equals: East! !
!MarsRoverTest methodsFor: 'Basic moves - from North' stamp: 'VPM 10/9/2019 13:31:47'!
testMovesOneWestAfterRotatingRight

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: East.
	
	rover do: 'rrf'.
	
	self assert: rover at equals: -1@0.
	self assert: rover orientation equals: West! !
!MarsRoverTest methodsFor: 'Basic moves - from North' stamp: 'VPM 10/9/2019 13:32:02'!
testMovesOneWestAfterRotatingLeft

	| rover |
	
	rover := MarsRover startAt: 0@0 oriented: East.
	
	rover do: 'llf'.
	
	self assert: rover at equals: -1@0.
	self assert: rover orientation equals: West! !
!MarsRover class methodsFor: 'no messages' stamp: 'VPM 10/9/2019 13:33:57'!
startAt: aPoint oriented: aCardinalPosition

	^ self new withStartingPoint: aPoint oriented: aCardinalPosition! !

!classDefinition: #MarsRover category: #MarsRover!
Object subclass: #MarsRover
	instanceVariableNames: 'myPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover!
Object subclass: #MarsRover
	instanceVariableNames: 'myPosition myOrientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'nil' stamp: 'VPM 10/9/2019 13:35:04'!
withStartingPoint: aPoint oriented: aCardinalPosition

	myPosition := aPoint.
	myOrientation := aCardinalPosition ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 13:35:51'!
at
	^ myPosition ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 13:36:17'!
orientation
	^ myOrientation ! !
!MarsRoverTest methodsFor: 'tests - initialization' stamp: 'VPM 10/9/2019 13:36:36' prior: 50743652!
testGoodStart
	
	| rover |
	rover := MarsRover startAt: 1@1 oriented: North.
	
	self assert: rover at equals: 1@1.
	self assert: rover orientation equals: North.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 13:41:06'!
do: aCommand
"hacer abstraccion para las instrucciones"
	aCommand do: [ :anInstruction |
		anInstruction = $f ifTrue: [ myPosition := myPosition + myOrientation delta ] ]! !
!North class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 13:41:32'!
delta
	^ 0@1! !
!South class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 13:41:45'!
delta
	^ 0@-1! !
!West class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 13:42:05'!
delta
	^ -1@0! !
!East class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 13:42:24'!
delta
	^ 1@0! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 13:43:01'!
testDeltaNorth
	self assert: North delta equals: 0@1! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 13:43:16'!
testDeltaSouth
	self assert: South delta equals: 0@-1! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 13:43:32'!
testDeltaEast
	self assert: East delta equals: 1@0! !
!MarsRoverTest methodsFor: 'tests - cardinal' stamp: 'VPM 10/9/2019 13:43:44'!
testDeltaWest
	self assert: West delta equals: -1@0! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 13:45:13' prior: 50743979!
do: aCommand
"hacer abstraccion para las instrucciones"
	aCommand do: [ :anInstruction |
		anInstruction = $f ifTrue: [ myPosition := myPosition + myOrientation delta ].
		anInstruction = $b ifTrue: [ myPosition := myPosition - myOrientation delta]  ]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 13:45:14' prior: 50744019!
do: aCommand
"hacer abstraccion para las instrucciones"
	aCommand do: [ :anInstruction |
		anInstruction = $f ifTrue: [ myPosition := myPosition + myOrientation delta ].
		anInstruction = $b ifTrue: [ myPosition := myPosition - myOrientation delta] ]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 13:47:12' prior: 50744030!
do: aCommand
"hacer abstraccion para las instrucciones"
	aCommand do: [ :anInstruction |
		anInstruction = $f ifTrue: [ myPosition := myPosition + myOrientation delta ].
		anInstruction = $b ifTrue: [ myPosition := myPosition - myOrientation delta].
		anInstruction = $l ifTrue: [ myOrientation := myOrientation left ].
		anInstruction = $r ifTrue: [ myOrientation := myOrientation right ] ]! !
!MarsRoverTest methodsFor: 'Basic rotations' stamp: 'VPM 10/9/2019 13:47:27' prior: 50743597!
testRotatesLeftToEast
	
	| rover |
	
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'lll'.
	
	self assert: rover at equals: 1@1.
	self assert: rover orientation equals: East.! !
!MarsRoverTest methodsFor: 'Basic rotations' stamp: 'VPM 10/9/2019 13:47:34' prior: 50743606!
testRotatesLeftToSouth
	
	| rover |
	
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'll'.
	
	self assert: rover at equals: 1@1.
	self assert: rover orientation equals: South.! !
!MarsRoverTest methodsFor: 'Basic rotations' stamp: 'VPM 10/9/2019 13:47:40' prior: 50743615!
testRotatesLeftToWest
	
	| rover |
	
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'l'.
	
	self assert: rover at equals: 1@1.
	self assert: rover orientation equals: West.! !
!MarsRoverTest methodsFor: 'Basic rotations' stamp: 'VPM 10/9/2019 13:47:46' prior: 50743624!
testRotatesRightToEast
	
	| rover |
	
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'r'.
	
	self assert: rover at equals: 1@1.
	self assert: rover orientation equals: East.! !
!MarsRoverTest methodsFor: 'Basic rotations' stamp: 'VPM 10/9/2019 13:47:52' prior: 50743633!
testRotatesRightToSouth
	
	| rover |
	
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'rr'.
	
	self assert: rover at equals: 1@1.
	self assert: rover orientation equals: South.! !
!MarsRoverTest methodsFor: 'Basic rotations' stamp: 'VPM 10/9/2019 13:48:00' prior: 50743642!
testRotatesRightToWest
	
	| rover |
	
	rover := MarsRover startAt: 1@1 oriented: North.
	
	rover do: 'rrr'.
	
	self assert: rover at equals: 1@1.
	self assert: rover orientation equals: West.! !
!MarsRoverTest methodsFor: 'Straight Line moves' stamp: 'VPM 10/9/2019 13:57:49'!
testMovesFarNorth
	
	| instructions rover |
	rover := MarsRover startAt: -1@-1 oriented: North.
	instructions := 'fffffffffffffffffffff'.
	
	rover do: instructions.
	
	self assert: rover at equals: -1@(instructions size - 1).
	self assert: rover orientation equals: North! !
!MarsRoverTest methodsFor: 'Straight Line moves' stamp: 'VPM 10/9/2019 13:57:54' prior: 50744113!
testMovesFarNorth
	
	| instructions rover |
	
	rover := MarsRover startAt: -1@-1 oriented: North.
	instructions := 'fffffffffffffffffffff'.
	
	rover do: instructions.
	
	self assert: rover at equals: -1@(instructions size - 1).
	self assert: rover orientation equals: North! !
!MarsRoverTest methodsFor: 'Straight Line moves' stamp: 'VPM 10/9/2019 13:59:15'!
testMovesFarSouth
	
	| instructions rover |
	
	rover := MarsRover startAt: -1@-1 oriented: South.
	instructions := 'fffffffffffffffffffff'.
	
	rover do: instructions.
	
	self assert: rover at equals: -1@(-1 - instructions size).
	self assert: rover orientation equals: South! !
!MarsRoverTest methodsFor: 'Straight Line moves' stamp: 'VPM 10/9/2019 13:59:38'!
testMovesFarEast
	
	| instructions rover |
	
	rover := MarsRover startAt: -1@-1 oriented: East.
	instructions := 'fffffffffffffffffffff'.
	
	rover do: instructions.
	
	self assert: rover at equals: (instructions size - 1)@-1.
	self assert: rover orientation equals: East! !
!MarsRoverTest methodsFor: 'Straight Line moves' stamp: 'VPM 10/9/2019 14:00:16'!
testMovesFarWest
	
	| instructions rover |
	
	rover := MarsRover startAt: -1@-1 oriented: West.
	instructions := 'fffffffffffffffffffff'.
	
	rover do: instructions.
	
	self assert: rover at equals: (-1 - instructions size)@-1.
	self assert: rover orientation equals: West! !
!MarsRoverTest methodsFor: 'Straight Line moves' stamp: 'VPM 10/9/2019 14:00:49'!
testMovesFarEastWithCrazyFullTurns
	
	| instructions rover |
	
	rover := MarsRover startAt: -1@-1 oriented: East.
	instructions := 'fffffllllfffffffffrrrrfffffff'.
	
	rover do: instructions.
	
	self assert: rover at equals: (instructions size - 1)@-1.
	self assert: rover orientation equals: East! !
!MarsRoverTest methodsFor: 'Straight Line moves' stamp: 'VPM 10/9/2019 14:04:28' prior: 50744173!
testMovesFarEastWithCrazyFullTurns
	
	| instructions rover |
	
	rover := MarsRover startAt: -1@-1 oriented: East.
	instructions := 'fffffllllffffffffffffffff'.
	
	rover do: instructions.
	
	self assert: rover at equals: (instructions size - 1)@-1.
	self assert: rover orientation equals: East! !
!MarsRoverTest methodsFor: 'Straight Line moves' stamp: 'VPM 10/9/2019 14:05:21' prior: 50744186!
testMovesFarEastWithCrazyFullTurns
	
	| instructions rover |
	
	rover := MarsRover startAt: -1@-1 oriented: East.
	instructions := 'fffffllllfffffffrrrrfffffffff'.
	
	rover do: instructions.
	
	self assert: rover at equals: (instructions select: [ :command |  command = $f ] size - 1)@-1.
	self assert: rover orientation equals: East! !
!MarsRoverTest methodsFor: 'Straight Line moves' stamp: 'VPM 10/9/2019 14:06:16' prior: 50744199!
testMovesFarEastWithCrazyFullTurns
	
	| instructions rover |
	
	rover := MarsRover startAt: -1@-1 oriented: East.
	instructions := 'fffffllllfffffffrrrrfffffffff'.
	
	rover do: instructions.
	
	self assert: rover at equals: 20@-1.
	self assert: rover orientation equals: East! !
!MarsRoverTest methodsFor: 'Straight Line moves' stamp: 'VPM 10/9/2019 14:06:38'!
testMovesFarWestWithCrazyFullTurns
	
	| instructions rover |
	
	rover := MarsRover startAt: -1@-1 oriented: West.
	instructions := 'fffffllllfffffffrrrrfffffffff'.
	
	rover do: instructions.
	
	self assert: rover at equals: -22@-1.
	self assert: rover orientation equals: West! !
!MarsRoverTest methodsFor: 'Straight Line moves' stamp: 'VPM 10/9/2019 14:07:07'!
testMovesFarNorthWithCrazyFullTurns
	
	| instructions rover |
	
	rover := MarsRover startAt: -1@-1 oriented: North.
	instructions := 'fffffllllfffffffrrrrfffffffff'.
	
	rover do: instructions.
	
	self assert: rover at equals: -1@20.
	self assert: rover orientation equals: North! !
!MarsRoverTest methodsFor: 'Straight Line moves' stamp: 'VPM 10/9/2019 14:07:21'!
testMovesFarSouthWithCrazyFullTurns
	
	| instructions rover |
	
	rover := MarsRover startAt: -1@-1 oriented: South.
	instructions := 'fffffllllfffffffrrrrfffffffff'.
	
	rover do: instructions.
	
	self assert: rover at equals: -1@-22.
	self assert: rover orientation equals: South! !
!MarsRoverTest methodsFor: 'Full rectangles' stamp: 'VPM 10/9/2019 14:11:31'!
testHalfRectangleForward
	
	| commands rover |
	rover := MarsRover startAt: 0@0 oriented: East.
	
	commands := 'fffflfffffl'.
	
	rover do: commands.
	
	self assert: rover at equals: 4@5.
	self assert: rover orientation equals: East left left! !
!MarsRoverTest methodsFor: 'Full rectangles' stamp: 'VPM 10/9/2019 14:11:49'!
testHalfRectangleForwardForward
	
	| commands rover |
	rover := MarsRover startAt: 0@0 oriented: East.
	
	commands := 'fffflfffffl'.
	
	rover do: commands.
	
	self assert: rover at equals: 4@5.
	self assert: rover orientation equals: East left left! !
!MarsRoverTest methodsFor: 'Full rectangles' stamp: 'VPM 10/9/2019 14:12:07'!
testHalfRectangleForwardBackward
	
	| commands rover |
	rover := MarsRover startAt: 0@0 oriented: East.
	
	commands := 'fffflbbbbbl'.
	
	rover do: commands.
	
	self assert: rover at equals: 4@-5.
	self assert: rover orientation equals: East left left! !
!MarsRoverTest methodsFor: 'Full rectangles' stamp: 'VPM 10/9/2019 14:12:19'!
testHalfRectangleBackwardBackward
	
	| commands rover |
	rover := MarsRover startAt: 0@0 oriented: East.
	
	commands := 'fffflbbbbbl'.
	
	rover do: commands.
	
	self assert: rover at equals: 4@-5.
	self assert: rover orientation equals: East left left! !
!MarsRoverTest methodsFor: 'Full rectangles' stamp: 'VPM 10/9/2019 14:12:28' prior: 50744294!
testHalfRectangleBackwardBackward
	
	| commands rover |
	rover := MarsRover startAt: 0@0 oriented: East.
	
	commands := 'bbbblbbbbbl'.
	
	rover do: commands.
	
	self assert: rover at equals: -4@-5.
	self assert: rover orientation equals: East left left! !
!MarsRoverTest methodsFor: 'Full rectangles' stamp: 'VPM 10/9/2019 14:12:51'!
testHalfRectangleBackwardForward
	
	| commands rover |
	rover := MarsRover startAt: 0@0 oriented: East.
	
	commands := 'bbbblfffffl'.
	
	rover do: commands.
	
	self assert: rover at equals: -4@5.
	self assert: rover orientation equals: East left left! !

MarsRoverTest removeSelector: #testHalfRectangleForward!
!MarsRoverTest methodsFor: 'Wrong command sequence' stamp: 'VPM 10/9/2019 14:16:06'!
testMovesStraightUntilUnknownCommand

	| commands rover |
	rover := MarsRover startAt: 4@4 oriented: South.
	
	commands := 'ffffaaaaafff'.
	
	rover do: commands.
	
	self assert: rover at equals: 4@0.
	self assert: rover orientation equals: South! !
!MarsRoverTest methodsFor: 'Wrong command sequence' stamp: 'VPM 10/9/2019 14:16:11' prior: 50744329!
testMovesStraightUntilUnknownCommand

	| commands rover |
	
	rover := MarsRover startAt: 4@4 oriented: South.
	
	commands := 'ffffaaaaafff'.
	
	rover do: commands.
	
	self assert: rover at equals: 4@0.
	self assert: rover orientation equals: South! !

Object subclass: #CardinalDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #CardinalDirection category: #MarsRover!
Object subclass: #CardinalDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalDirection subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: #MarsRover!
CardinalDirection subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalDirection subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: #MarsRover!
CardinalDirection subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalDirection subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: #MarsRover!
CardinalDirection subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalDirection subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: #MarsRover!
CardinalDirection subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!CardinalDirection class methodsFor: 'no messages' stamp: 'VPM 10/9/2019 14:18:02'!
left
	self subclassResponsibility ! !
!CardinalDirection class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 14:18:14'!
right
	self subclassResponsibility ! !
!CardinalDirection class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 14:18:29'!
delta
	self subclassResponsibility ! !

Object subclass: #Command
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Command category: #MarsRover!
Object subclass: #Command
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Command class methodsFor: 'no messages' stamp: 'VPM 10/9/2019 14:20:06'!
executeOn: aMarsRover
	self subclassResponsibility ! !

Command subclass: #Forward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Forward category: #MarsRover!
Command subclass: #Forward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Forward class methodsFor: 'no messages' stamp: 'VPM 10/9/2019 14:21:12'!
toChar
	^ $f! !
!Command class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 14:23:35'!
forChar: aCommandChar
	^ self subclasses detect: [ :aTypeOfCommand | aTypeOfCommand toChar = aCommandChar ]! !

Command subclass: #Backward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Backward category: #MarsRover!
Command subclass: #Backward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Command subclass: #Left
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Left category: #MarsRover!
Command subclass: #Left
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Command subclass: #Right
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Right category: #MarsRover!
Command subclass: #Right
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Backward class methodsFor: 'nil' stamp: 'VPM 10/9/2019 14:24:22'!
toChar
	^ $b! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 14:26:15'!
moveTo: aPosition
	myPosition := aPosition! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 14:26:44'!
orientTo: aCardinalDirection
	myOrientation := aCardinalDirection ! !
!Backward class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 14:27:44'!
executeOn: aMarsRover
	aMarsRover moveTo: aMarsRover at - (aMarsRover orientation delta)! !
!Backward class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 14:27:50' prior: 50744487!
executeOn: aMarsRover
	aMarsRover moveTo: aMarsRover at - (aMarsRover orientation delta)! !
!Forward class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 14:28:02'!
executeOn: aMarsRover
	aMarsRover moveTo: aMarsRover at - (aMarsRover orientation delta)! !
!Forward class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 14:28:05' prior: 50744499!
executeOn: aMarsRover
	aMarsRover moveTo: aMarsRover at + (aMarsRover orientation delta)! !
!Left class methodsFor: 'nil' stamp: 'VPM 10/9/2019 14:28:16'!
toChar
	^ $l! !
!Left class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 14:28:33'!
executeOn: aMarsRover
	aMarsRover orientTo: aMarsRover orientation left! !
!Right class methodsFor: 'no messages' stamp: 'VPM 10/9/2019 14:28:50'!
toChar
	^ $r! !
!Right class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 14:28:56'!
executeOn: aMarsRover
	aMarsRover orientTo: aMarsRover orientation right! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 14:30:02' prior: 50744041!
do: aCommand
"hacer abstraccion para las instrucciones"
	aCommand do: [ :anInstruction | Command forChar: anInstruction; executeOn: self ]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 14:31:56' prior: 50744527!
do: aCommand
"hacer abstraccion para las instrucciones"
	aCommand do: [ :anInstruction | (Command forChar: anInstruction) executeOn: self ]! !
!Command class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 14:36:44' prior: 50744441!
forChar: aCommandChar
	^ self subclasses detect: [ :aTypeOfCommand | aTypeOfCommand toChar = aCommandChar ] 
						ifNone: [ self error: 'Unknown Command' ]! !
!MarsRoverTest methodsFor: 'Wrong command sequence' stamp: 'VPM 10/9/2019 14:39:50' prior: 50744340!
testMovesStraightUntilUnknownCommand

	| commands rover |
	
	rover := MarsRover startAt: 4@4 oriented: South.
	
	commands := 'ffffaaaaafff'.
	
	self should: [ rover do: commands ] raise: Error.
	
	self assert: rover at equals: 4@0.
	self assert: rover orientation equals: South! !
!MarsRoverTest methodsFor: 'Wrong command sequence' stamp: 'VPM 10/9/2019 14:40:03' prior: 50744552!
testMovesStraightUntilUnknownCommand

	| commands rover |
	
	rover := MarsRover startAt: 4@4 oriented: South.
	
	commands := 'ffffaaaaafff'.
	
	self should: [ rover do: commands ] raise: Error.
	
	self assert: rover at equals: 4@0.
	self assert: rover orientation equals: South! !
!MarsRoverTest methodsFor: 'Wrong command sequence' stamp: 'VPM 10/9/2019 14:40:20' prior: 50744564!
testMovesStraightUntilUnknownCommand

	| commands rover |
	
	rover := MarsRover startAt: 4@4 oriented: South.
	
	commands := 'ffffaaaaafff'.
	"esto deberia estar bien hecho jejje"
	self should: [ rover do: commands ] raise: Error.
	
	self assert: rover at equals: 4@0.
	self assert: rover orientation equals: South! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 14:40:54' prior: 50744535!
do: anInstructionList

	anInstructionList do: [ :anInstruction | (Command forChar: anInstruction) executeOn: self ]! !

MarsRover removeSelector: #withStartingPoint:oriented:!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 14:41:48' prior: 50743937!
startAt: aPoint oriented: aCardinalDirection

	^ (self new) moveTo: aPoint ; orientTo: aCardinalDirection! !

----QUIT----(9 October 2019 14:42:37) CuisUniversity-3839.image priorSource: 13152535!

----STARTUP---- (9 October 2019 15:42:45) as /home/valchu/Documents/UBA/cuis/CuisUniversity-3839.image!

!MarsRoverTest methodsFor: 'Wrong command sequence' stamp: 'VPM 10/9/2019 15:43:25' prior: 50744576!
testMovesStraightUntilUnknownCommand

	| commands rover |
	
	rover := MarsRover startAt: 4@4 oriented: South.
	
	commands := 'ffffaaaaafff'.
	"esto deberia estar bien hecho jejje"
	self should: [ rover do: commands ] 
		raise: Error
		withMessageText: ''.
	
	self assert: rover at equals: 4@0.
	self assert: rover orientation equals: South! !
!Command class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 15:44:17' prior: 50744543!
forChar: aCommandChar
	^ self subclasses detect: [ :aTypeOfCommand | aTypeOfCommand toChar = aCommandChar ] 
						ifNone: [ self error: self unknownCommandErrorMessage ]! !
!Command class methodsFor: 'as yet unclassified' stamp: 'VPM 10/9/2019 15:44:35'!
unknownCommandErrorMessage
	^ 'Unknown Command'! !
!MarsRoverTest methodsFor: 'Wrong command sequence' stamp: 'VPM 10/9/2019 15:45:30' prior: 50744611!
testMovesStraightUntilUnknownCommand

	| commands rover |
	
	rover := MarsRover startAt: 4@4 oriented: South.
	
	commands := 'ffffaaaaafff'.
	"esto deberia estar bien hecho jejje"
	self should: [ rover do: commands ] 
		raise: Error
		withMessageText: Command unknownCommandErrorMessage .
	
	self assert: rover at equals: 4@0.
	self assert: rover orientation equals: South! !

----QUIT----(9 October 2019 15:45:51) CuisUniversity-3839.image priorSource: 13214508!

----STARTUP---- (9 October 2019 16:00:52) as /home/valchu/Documents/UBA/cuis/CuisUniversity-3839.image!


----QUIT----(9 October 2019 16:18:14) CuisUniversity-3839.image priorSource: 13216055!

----STARTUP---- (16 October 2019 11:52:14) as /home/valchu/Documents/UBA/cuis/CuisUniversity-3839.image!


----End fileIn of /home/valchu/Documents/UBA/ISW1/22-TerniLapilli/Terni-Lapilli.st----!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 11:53:39'!
cantMakeAnInvalidMove
	^ 'cant make a move more than one place away'! !

Object subclass: #State
	instanceVariableNames: 'ocuppiedPlaces'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

!classDefinition: #State category: #'Terni-Lapilli'!
Object subclass: #State
	instanceVariableNames: 'ocuppiedPlaces'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

State subclass: #XState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

!classDefinition: #XState category: #'Terni-Lapilli'!
State subclass: #XState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

State subclass: #OState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

!classDefinition: #OState category: #'Terni-Lapilli'!
State subclass: #OState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!
!State methodsFor: 'no messages' stamp: 'VPM 10/16/2019 11:56:37'!
isPossitionOccupied
	^ ocuppiedPlaces ! !
!State methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 11:57:07'!
isPossitionOccupied: aPosition
	^ ocuppiedPlaces includes: aPosition! !

State removeSelector: #isPossitionOccupied!

!classDefinition: #OS category: #Unknown!
Object subclass: #OS
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Unknown'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 11:58:03' prior: 50745077!
initialize
	XS := XState new.
	OS := OState new.
	XTurn := true.
	OTurn := false.
	Xs := Set new.
	Os := Set new.
	gameFinished := false.! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'XTurn OTurn Xs Os gameFinished OS XS'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

!classDefinition: #TerniLapilli category: #'Terni-Lapilli'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'XTurn OTurn Xs Os gameFinished OS XS'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

Smalltalk removeClassNamed: #OS!
!State methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 11:59:12'!
nextTurn
	self subclassResponsibility ! !
!OState methodsFor: 'no messages' stamp: 'VPM 10/16/2019 11:59:36'!
nextTurn
	^ OState new! !
!XState methodsFor: 'no messages' stamp: 'VPM 10/16/2019 12:00:30'!
nextTurn
	^ OState new! !

OState class
	instanceVariableNames: 'Os'!

!classDefinition: 'OState class' category: #'Terni-Lapilli'!
OState class
	instanceVariableNames: 'Os'!
!OState class methodsFor: 'no messages' stamp: 'VPM 10/16/2019 12:02:50'!
new
	Os isNil isTrue: [ Os := OState basicNew ].
	^ Os! !

XState class
	instanceVariableNames: 'Xs'!

!classDefinition: 'XState class' category: #'Terni-Lapilli'!
XState class
	instanceVariableNames: 'Xs'!
!XState class methodsFor: 'no messages' stamp: 'VPM 10/16/2019 12:04:13'!
new
	Xs isNil ifTrue: [ Xs := XState basicNew ].
	^ Xs! !
!State methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:05:02'!
hasWon
	! !
!State methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:05:39' prior: 50745341!
hasWon
	| aMagicSquare total |
	
	aMagicSquare := TerniLapilli magicSquare.
	total := 0.
	ocuppiedPlaces do: [:elem | total := total + (aMagicSquare at: elem)].
	^15 = total.! !
!State methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:05:42' prior: 50745345!
hasWon
	| aMagicSquare total |
	
	aMagicSquare := TerniLapilli magicSquare.
	total := 0.
	ocuppiedPlaces do: [ :elem | total := total + (aMagicSquare at: elem)].
	^15 = total.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:05:59' prior: 50745227!
magicSquare
	
	| conversionArray |
	conversionArray := Array new: 10.
	^conversionArray 
		at: 1 put: 4;
		at: 2 put: 9;
		at: 3 put: 2;
		at: 4 put: 3;
		at: 5 put: 5;
		at: 6 put: 7;
		at: 7 put: 8;
		at: 8 put: 1;
		at: 9 put: 6;
		yourself! !
!OState class methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:06:28' prior: 50745327!
new
	Os isNil ifTrue: [ Os := OState basicNew ].
	^ Os! !
!State methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:08:55'!
moveFrom: startingPosition to: endPosition
	! !
!State methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:10:41' prior: 50745379!
moveFrom: startingPosition to: endPosition
	ocuppiedPlaces size < 3 ifTrue: [ self error: TerniLapilli cantMoveBeforeThirdRound ].
	ocuppiedPlaces remove: startingPosition ifAbsent: [ self error: TerniLapilli cantMoveFromAnUnoccupiedSpace ].
	self playOat: endPosition.! !
!State methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:10:46' prior: 50745384!
moveFrom: startingPosition to: endPosition

	ocuppiedPlaces size < 3 ifTrue: [ self error: TerniLapilli cantMoveBeforeThirdRound ].
	ocuppiedPlaces remove: startingPosition ifAbsent: [ self error: TerniLapilli cantMoveFromAnUnoccupiedSpace ].
	self playOat: endPosition.! !
!State methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:11:47' prior: 50745396!
moveFrom: startingPosition to: endPosition

	ocuppiedPlaces size < 3 ifTrue: [ self error: TerniLapilli cantMoveBeforeThirdRound ].
	ocuppiedPlaces remove: startingPosition ifAbsent: [ self error: TerniLapilli cantMoveFromAnUnoccupiedSpace ].
	ocuppiedPlaces add: endPosition.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:12:47' prior: 50745142!
moveXfrom: initialPostition to: finalPosition
	
	initialPostition = finalPosition ifTrue: [self error: TerniLapilli cantMoveToTheSamePlace].	
	Xs size < 3 ifFalse: [
	Xs remove: initialPostition ifAbsent: [self error: TerniLapilli cantMoveFromAnUnoccupiedSpace].
	self playXat: finalPosition.
	] ifTrue: [
		self error: TerniLapilli cantMoveBeforeThirdRound.
	]
" chequear si la posicion esta ocupada"
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:12:53' prior: 50745420!
moveXfrom: initialPostition to: finalPosition
	
	initialPostition = finalPosition ifTrue: [self error: TerniLapilli cantMoveToTheSamePlace].	
	Xs size < 3 ifFalse: [
	Xs remove: initialPostition ifAbsent: [self error: TerniLapilli cantMoveFromAnUnoccupiedSpace].
	self playXat: finalPosition.
	] ifTrue: [
		self error: TerniLapilli cantMoveBeforeThirdRound.
	]
" chequear si la posicion esta ocupada por O"
! !
!State methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:18:05'!
nextTurnForXState: xState OState: oState
	self subclassResponsibility ! !
!OState methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:18:24'!
nextTurnForXState: xState OState: oState
	^ xState! !
!XState methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:18:38'!
nextTurnForXState: xState OState: oState
	^ oState! !

XState removeSelector: #nextTurn!

OState removeSelector: #nextTurn!

OState class removeSelector: #new!

XState class removeSelector: #new!

XState class
	instanceVariableNames: ''!

!classDefinition: 'XState class' category: #'Terni-Lapilli'!
XState class
	instanceVariableNames: ''!

OState class
	instanceVariableNames: ''!

!classDefinition: 'OState class' category: #'Terni-Lapilli'!
OState class
	instanceVariableNames: ''!
!State methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:27:02'!
playAt: aPosition! !
!State methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:27:57' prior: 50745480!
playAt: aPosition
	ocuppiedPlaces size = 3 ifTrue: [ self error: TerniLapilli cantPlayMoreThanThreeTimes ].
	ocuppiedPlaces add: aPosition! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'XTurn OTurn Xs Os gameFinished OS XS nextPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!

!classDefinition: #TerniLapilli category: #'Terni-Lapilli'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'XTurn OTurn Xs Os gameFinished OS XS nextPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni-Lapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:29:45' prior: 50745291!
initialize
	XS := XState new.
	OS := OState new.
 	nextPlayer := XS.
	XTurn := true.
	OTurn := false.
	Xs := Set new.
	Os := Set new.
	gameFinished := false.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:29:56' prior: 50745505!
initialize
	XS := XState new.
	OS := OState new.
 	nextPlayer := XS.
	
	XTurn := true.
	OTurn := false.
	Xs := Set new.
	Os := Set new.
	gameFinished := false.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:30:13' prior: 50745124!
isXTurn
	^ XS = nextPlayer ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:30:16' prior: 50745523!
isXTurn
	^ XS = nextPlayer! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:30:26' prior: 50745106!
isOTurn
	^ OS = nextPlayer ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:30:28' prior: 50745532!
isOTurn
	^ OS = nextPlayer! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:32:45' prior: 50745116!
isXTheWinner
	^ XS hasWon! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:32:55' prior: 50745098!
isOTheWinner
	^ OS hasWon! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:33:21' prior: 50745110!
isPositionOccupied: aPosition
	^(XS isPossitionOccupied: aPosition) | (OS isPossitionOccupied: aPosition).
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:40:03' prior: 50745128!
moveOfrom: initialPosition to: finalPosition
	

	initialPosition = finalPosition ifTrue: [ self error: TerniLapilli cantMoveToTheSamePlace ].
	OS moveFrom: initialPosition to: finalPosition! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:40:07' prior: 50745556!
moveOfrom: initialPosition to: finalPosition
	
	initialPosition = finalPosition ifTrue: [ self error: TerniLapilli cantMoveToTheSamePlace ].
	OS moveFrom: initialPosition to: finalPosition! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:44:19' prior: 50745566!
moveOfrom: initialPosition to: finalPosition
	XS isPositionOccupied: finalPosition.
	initialPosition = finalPosition ifTrue: [ self error: TerniLapilli cantMoveToTheSamePlace ].
	OS moveFrom: initialPosition to: finalPosition! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:45:14' prior: 50745576!
moveOfrom: initialPosition to: finalPosition
	(XS isPositionOccupied: finalPosition) ifTrue: [ self error: TerniLapilli cantMoveToOccuppiedPlace ].
	initialPosition = finalPosition ifTrue: [ self error: TerniLapilli cantMoveToTheSamePlace ].
	OS moveFrom: initialPosition to: finalPosition! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:45:43'!
cantMoveToOccuppiedPlace
	^ 'cant move to an already Occupied place'! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:46:11' prior: 50745436!
moveXfrom: initialPosition to: finalPosition
	
	(XS isPositionOccupied: finalPosition) ifTrue: [ self error: TerniLapilli cantMoveToOccuppiedPlace ].
	initialPosition = finalPosition ifTrue: [ self error: TerniLapilli cantMoveToTheSamePlace ].
	OS moveFrom: initialPosition to: finalPosition
! !

OState removeSelector: #nextTurnForXState:OState:!
!OState methodsFor: 'no messages' stamp: 'VPM 10/16/2019 12:46:54'!
isOTurn
	^ true! !
!OState methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:47:01'!
isXTurn
	^ false! !
!XState methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:47:09'!
isOTurn
	^ false! !
!XState methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:47:14'!
isXTurn
	^ true! !

XState removeSelector: #nextTurnForXState:OState:!

State removeSelector: #nextTurnForXState:OState:!

State removeSelector: #nextTurn!
!State methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:47:38'!
isOTurn
	self subclassResponsibility ! !
!State methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:47:42'!
isXTurn
	self subclassResponsibility ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:47:55' prior: 50745528!
isXTurn
	^ nextPlayer isXTurn! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:48:05' prior: 50745537!
isOTurn
	^ nextPlayer isOTurn! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:48:18' prior: 50745549!
isPositionOccupied: aPosition
	^ (XS isPossitionOccupied: aPosition) | (OS isPossitionOccupied: aPosition).
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:48:27' prior: 50745587!
moveOfrom: initialPosition to: finalPosition

	(XS isPositionOccupied: finalPosition) ifTrue: [ self error: TerniLapilli cantMoveToOccuppiedPlace ].
	initialPosition = finalPosition ifTrue: [ self error: TerniLapilli cantMoveToTheSamePlace ].
	OS moveFrom: initialPosition to: finalPosition! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:49:29' prior: 50745661!
moveOfrom: initialPosition to: finalPosition

	self isOTurn ifFalse: [ self error: TerniLapilli isNotOTurn ].
	
	(XS isPositionOccupied: finalPosition) ifTrue: [ self error: TerniLapilli cantMoveToOccuppiedPlace ].
	
	initialPosition = finalPosition ifTrue: [ self error: TerniLapilli cantMoveToTheSamePlace ].
	
	OS moveFrom: initialPosition to: finalPosition! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:50:08' prior: 50745605!
moveXfrom: initialPosition to: finalPosition

	self isXTurn ifFalse: [ self error: TerniLapilli isNotXTurn ].
	
	(XS isPositionOccupied: finalPosition) ifTrue: [ self error: TerniLapilli cantMoveToOccuppiedPlace ].
	
	initialPosition = finalPosition ifTrue: [ self error: TerniLapilli cantMoveToTheSamePlace ].
	
	OS moveFrom: initialPosition to: finalPosition
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:51:51' prior: 50745156!
playOat: aPosition

	self isOTurn ifFalse: [ self error: TerniLapilli isNotOTurn ].
	(self isPositionOccupied: aPosition) ifFalse: [ self error: TerniLapilli cantPlayInAnOccupiedSlot ].
	OS playAt: aPosition
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:52:02' prior: 50745674!
moveOfrom: initialPosition to: finalPosition

	self isOTurn ifFalse: [ self error: TerniLapilli isNotOTurn ].
	
	(self isPositionOccupied: finalPosition) ifTrue: [ self error: TerniLapilli cantMoveToOccuppiedPlace ].
	
	initialPosition = finalPosition ifTrue: [ self error: TerniLapilli cantMoveToTheSamePlace ].
	
	OS moveFrom: initialPosition to: finalPosition! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:52:09' prior: 50745689!
moveXfrom: initialPosition to: finalPosition

	self isXTurn ifFalse: [ self error: TerniLapilli isNotXTurn ].
	
	(self isPositionOccupied: finalPosition) ifTrue: [ self error: TerniLapilli cantMoveToOccuppiedPlace ].
	
	initialPosition = finalPosition ifTrue: [ self error: TerniLapilli cantMoveToTheSamePlace ].
	
	OS moveFrom: initialPosition to: finalPosition
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:52:13' prior: 50745729!
moveXfrom: initialPosition to: finalPosition

	self isXTurn ifFalse: [ self error: TerniLapilli isNotXTurn ].
	
	(self isPositionOccupied: finalPosition) ifTrue: [ self error: TerniLapilli cantMoveToOccuppiedPlace ].
	
	initialPosition = finalPosition ifTrue: [ self error: TerniLapilli cantMoveToTheSamePlace ].
	
	XS moveFrom: initialPosition to: finalPosition
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:52:37' prior: 50745171!
playXat: aPosition

	self isOTurn ifFalse: [ self error: TerniLapilli isNotOTurn ].
	(self isPositionOccupied: aPosition) ifFalse: [ self error: TerniLapilli cantPlayInAnOccupiedSlot ].
	XS playAt: aPosition! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:52:42' prior: 50745759!
playXat: aPosition

	self isXTurn ifFalse: [ self error: TerniLapilli isNotXTurn ].
	(self isPositionOccupied: aPosition) ifFalse: [ self error: TerniLapilli cantPlayInAnOccupiedSlot ].
	XS playAt: aPosition! !
!State methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:53:15'!
initialize
	ocuppiedPlaces := Set new! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:54:23' prior: 50745704!
playOat: aPosition

	self isOTurn ifFalse: [ self error: TerniLapilli isNotOTurn ].
	(self isPositionOccupied: aPosition) ifFalse: [ self error: TerniLapilli cantPlayInAnOccupiedSlot ].
	OS playAt: aPosition.
	nextPlayer := XS
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:54:36' prior: 50745769!
playXat: aPosition

	self isXTurn ifFalse: [ self error: TerniLapilli isNotXTurn ].
	(self isPositionOccupied: aPosition) ifFalse: [ self error: TerniLapilli cantPlayInAnOccupiedSlot ].
	XS playAt: aPosition.
	nextPlayer := OS! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:55:52' prior: 50745783!
playOat: aPosition

	self isOTurn ifFalse: [ self error: TerniLapilli isNotOTurn ].
	(self isPositionOccupied: aPosition) ifTrue: [ self error: TerniLapilli cantPlayInAnOccupiedSlot ].
	OS playAt: aPosition.
	nextPlayer := XS
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:56:00' prior: 50745794!
playXat: aPosition

	self isXTurn ifFalse: [ self error: TerniLapilli isNotXTurn ].
	(self isPositionOccupied: aPosition) ifTrue: [ self error: TerniLapilli cantPlayInAnOccupiedSlot ].
	XS playAt: aPosition.
	nextPlayer := OS! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:56:45' prior: 50745083!
isAnOPieceAt: aPosition
	^ OS isPossitionOccupied: aPosition! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:57:03' prior: 50745088!
isAnXPieceAt: aPosition
	^ XS isPositionOccupied: aPosition ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:57:27' prior: 50745654!
isPositionOccupied: aPosition
	^ (self isAnXPieceAt: aPosition) | (OS isPossitionOccupied: aPosition).
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:57:40' prior: 50745839!
isPositionOccupied: aPosition
	^ (self isAnXPieceAt: aPosition) | (self isAnOPieceAt: aPosition)
! !
!State methodsFor: 'as yet unclassified' stamp: 'VPM 10/16/2019 12:58:07'!
isPositionOccupied: aPosition
	^ ocuppiedPlaces includes: aPosition! !

----STARTUP---- (17 October 2019 18:31:47) as /home/valchu/Documents/UBA/cuis/CuisUniversity-3839.image!


----End fileIn of /home/valchu/Documents/UBA/2019-2c/23-Portfolio/Portfolio-Ejercicio.st----!
!Withdraw methodsFor: 'value' stamp: 'VPM 10/17/2019 18:34:08' prior: 50744826!
value

	^ value negated! !
!Withdraw methodsFor: 'value' stamp: 'VPM 10/17/2019 18:34:41' prior: 50744880!
value

	^ value! !
!AccountTransaction methodsFor: 'value' stamp: 'VPM 10/17/2019 18:35:14'!
balanceModification
	self subclassResponsibility ! !
!Withdraw methodsFor: 'value' stamp: 'VPM 10/17/2019 18:35:29'!
balanceModification
	^ self value negated! !
!Deposit methodsFor: 'value' stamp: 'VPM 10/17/2019 18:35:44'!
balanceModification
	^ self value! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'VPM 10/17/2019 18:35:55' prior: 50744867!
balance

	^transactions sum: [ :aTransaction | aTransaction balanceModification ] ifEmpty: [ 0 ]! !

Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Portfolio
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio'!
Object subclass: #Portfolio
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'no messages' stamp: 'VPM 10/17/2019 18:37:21'!
initialize
	| accounts |
	accounts := Set new! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:37:28' prior: 50744926!
initialize
	account := Set new! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:37:34' prior: 50744931!
initialize
	account := Set new! !

Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:37:49' prior: 50744936!
initialize
	accounts := Set new! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:40:03'!
add: anAccount
	((self alreadyHasAccount: anAccount) or: [ anAccount == self ]) ifTrue: [ self error: Portfolio cantAddAlreadyAddedAccount ]! !
!Portfolio class methodsFor: 'no messages' stamp: 'VPM 10/17/2019 18:41:12'!
cantAddAlreadyAddedAccount
	^ 'No se puede agregar una cuenta que ya esta en el portfolio'! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:45:16'!
alreadyHasAccount: anAccount
	^ self == anAccount or: [ accounts allSatisfy: [ :existingAccount | (existingAccount == anAccount) not ]]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:45:56' prior: 50744968!
alreadyHasAccount: anAccount
	^ self == anAccount or: [ accounts allSatisfy: [ :existingAccount | existingAccount alreadyHasAccount: anAccount ]]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:48:27' prior: 50744976!
alreadyHasAccount: anAccount
	^ accounts inject: (self == anAccount) into: [ :a :existingAccount | a or: [existingAccount alreadyHasAccount: anAccount ]]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'VPM 10/17/2019 18:48:51'!
alreadyHasAccount: anAccount
	^ self == anAccount! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:50:28'!
hasAccount: anAccount
	^ accounts inject: (self == anAccount) into: [ :a :existingAccount | a or: [existingAccount alreadyHasAccount: anAccount ]]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:50:35' prior: 50744997!
hasAccount: anAccount
	^ accounts inject: (self == anAccount) into: [ :a :existingAccount | a or: [existingAccount hasAccount: anAccount ]]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'VPM 10/17/2019 18:50:43'!
hasAccount: anAccount
	^ self == anAccount! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: #'Portfolio-Ejercicio'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'VPM 10/17/2019 18:51:31'!
test01CreatesPortfolioWithAccount
	| account1 |
	account1 := ReceptiveAccount new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:52:30' prior: 50745027!
test01CreatesPortfolioWithAccount
	| account1 portfolio1 |
	account1 := ReceptiveAccount new.
	portfolio1 := Portfolio new.
	portfolio1 add: account1.
	
	self assert: (portfolio1 hasAccount: account1).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:53:50' prior: 50744955!
add: anAccount
	(self hasAccount: anAccount) ifTrue: [ self error: Portfolio cantAddAlreadyAddedAccount ].
	accounts add: anAccount ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:53:51' prior: 50745043!
add: anAccount
	(self hasAccount: anAccount) ifTrue: [ self error: Portfolio cantAddAlreadyAddedAccount ].
	accounts add: anAccount! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:54:22'!
test02CantAddAlreadyAddedPortfolio
	| account1 portfolio1 |
	account1 := ReceptiveAccount new.
	portfolio1 := Portfolio new.
	portfolio1 add: account1.
	
	self assert: (portfolio1 hasAccount: account1).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:54:42' prior: 50745058!
test02CantAddAlreadyAddedPortfolio
	| account1 portfolio1 |
	account1 := ReceptiveAccount new.
	portfolio1 := Portfolio new.
	portfolio1 add: account1.
	
	
	self assert: (portfolio1 hasAccount: account1).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:55:51' prior: 50745068!
test02CantAddAlreadyAddedPortfolio
	| account1 portfolio1 |
	account1 := ReceptiveAccount new.
	portfolio1 := Portfolio new.
	portfolio1 add: account1.
	
	self should: [ portfolio1 add: account1  ]
		raise: Error
		withMessageText: (Portfolio cantAddAlreadyAddedAccount ).
	self assert: (portfolio1 hasAccount: account1).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:56:39'!
test02CantAddItself
	| portfolio1 |
	
	portfolio1 := Portfolio new.
	
	self should: [ portfolio1 add: portfolio1  ]
		raise: Error
		withMessageText: (Portfolio cantAddAlreadyAddedAccount).
	self assert: (portfolio1 hasAccount: portfolio1).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:56:46'!
test03CantAddItself
	| portfolio1 |
	
	portfolio1 := Portfolio new.
	
	self should: [ portfolio1 add: portfolio1  ]
		raise: Error
		withMessageText: (Portfolio cantAddAlreadyAddedAccount).
	self assert: (portfolio1 hasAccount: portfolio1).! !

PortfolioTest removeSelector: #test02CantAddItself!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:58:14'!
test04AddsAnotherPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	self should: [ portfolio1 add: portfolio2  ]
		raise: Error
		withMessageText: (Portfolio cantAddAlreadyAddedAccount).
	self assert: (portfolio1 hasAccount: portfolio1).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:58:20' prior: 50745114!
test04AddsAnotherPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	self should: [ portfolio1 add: portfolio2  ]
		raise: Error
		withMessageText: (Portfolio cantAddAlreadyAddedAccount).
	self assert: (portfolio1 hasAccount: portfolio2).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:58:31' prior: 50745127!
test04AddsAnotherPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	self assert: (portfolio1 hasAccount: portfolio2).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:58:52'!
test03CantHaveCircularPortfolios
	| portfolio1 |
	
	portfolio1 := Portfolio new.
	
	self should: [ portfolio1 add: portfolio1  ]
		raise: Error
		withMessageText: (Portfolio cantAddAlreadyAddedAccount).
	self assert: (portfolio1 hasAccount: portfolio1).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 18:59:01'!
test05CantHaveCircularPortfolios
	| portfolio1 |
	
	portfolio1 := Portfolio new.
	
	self should: [ portfolio1 add: portfolio1  ]
		raise: Error
		withMessageText: (Portfolio cantAddAlreadyAddedAccount).
	self assert: (portfolio1 hasAccount: portfolio1).! !

PortfolioTest removeSelector: #test03CantHaveCircularPortfolios!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:00:00' prior: 50745160!
test05CantHaveCircularPortfolios
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 add: portfolio2.
	
	self should: [ portfolio2 add: portfolio1  ]
		raise: Error
		withMessageText: (Portfolio cantAddAlreadyAddedAccount).
	self assert: (portfolio1 hasAccount: portfolio2).
	self assert: (portfolio2 hasAccount: portfolio1) not.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:03:57' prior: 50745051!
add: anAccount
	((self hasAccount: anAccount) or: [anAccount hasAccount: self]) ifTrue: [ self error: Portfolio cantAddAlreadyAddedAccount ].
	accounts add: anAccount! !

ReceptiveAccount removeSelector: #alreadyHasAccount:!

Portfolio removeSelector: #alreadyHasAccount:!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:05:40'!
test05CantAddPortfoliosToNewPortfolioWithSameAccount
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 add: portfolio2.
	
	self should: [ portfolio2 add: portfolio1  ]
		raise: Error
		withMessageText: (Portfolio cantAddAlreadyAddedAccount).
	self assert: (portfolio1 hasAccount: portfolio2).
	self assert: (portfolio2 hasAccount: portfolio1) not.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:07:18' prior: 50745201!
test05CantAddPortfoliosToNewPortfolioWithSameAccount
	| portfolio1 portfolio2 account1 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	portfolio1 add: account1.
	portfolio2 add: account1.
	
	portfolio3 := Portfolio new.
	portfolio3 add: portfolio1.
		
	self should: [ portfolio3 add: portfolio2  ]
		raise: Error
		withMessageText: (Portfolio cantAddAlreadyAddedAccount).
	self assert: (portfolio1 hasAccount: portfolio2).
	self assert: (portfolio2 hasAccount: portfolio1) not.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:10:27'!
hasRegistered: aTransaction
	^ accounts inject: false into: [ :a :b | a or: [ b hasRegistered: aTransaction ]].! !

PortfolioTest removeSelector: #test05CantAddPortfoliosToNewPortfolioWithSameAccount!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:12:36'!
test06PortfolioHasTransactionsForAccount

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: account.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:12:52' prior: 50745246!
test06PortfolioHasTransactionsForAccount

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: account.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered:withdraw).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:12:58' prior: 50745260!
test06PortfolioHasTransactionsForAccount

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: account.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:13:29'!
test07PortfolioHasTransactionsForMultipleAccounts

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: account.
	
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:13:36'!
test07PortfolioHasTransactionsForMultipleAccountsOneLevelDown

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: account.
	
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (portfolio hasRegistered: deposit).
	self deny: (portfolio hasRegistered: withdraw).! !

PortfolioTest removeSelector: #test07PortfolioHasTransactionsForMultipleAccounts!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:13:58' prior: 50745302!
test07PortfolioHasTransactionsForMultipleAccountsOneLevelDown

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: account.
	
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self assert: (portfolio hasRegistered: deposit).
	self assert: (portfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:15:12' prior: 50745319!
test07PortfolioHasTransactionsForMultipleAccountsOneLevelDown

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: account.
	
	deposit :=  Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (portfolio hasRegistered: deposit).
	self assert: (portfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:15:22' prior: 50745334!
test07PortfolioHasTransactionsForMultipleAccountsOneLevelDown

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: account.
	
	deposit :=  Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (portfolio hasRegistered: deposit).
	self assert: (portfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:15:41' prior: 50745274!
test06PortfolioHasTransactionsForAccount

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: account.
	
	deposit :=  Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (portfolio hasRegistered: deposit).
	self assert: (portfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:16:54' prior: 50745350!
test07PortfolioHasTransactionsForMultipleAccountsOneLevelDown

	| deposit withdraw portfolio account1 account2 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio2 := Portfolio new.
	portfolio2 add: account2.
	portfolio := Portfolio new.
	portfolio add: account1.
	portfolio add: portfolio2.
	
	deposit :=  Deposit register: 100 on: account1.
	withdraw := Withdraw register: 50 on: account2.
		
	self assert: (portfolio hasRegistered: deposit).
	self assert: (portfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:17:42'!
test08PortfolioBalanceForOneAccount

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: account.
	
	deposit :=  Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (portfolio balance: 50)! !

x := Set new.!

x add: 3.!

x sum!

x add: 5.!

x sum!

x sum: [:a | a +1 ]!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:20:27'!
balance
	^ accounts sum: [ :anAccount | anAccount balance ]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:20:47' prior: 50745401!
test08PortfolioBalanceForOneAccount

	| account deposit withdraw portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: account.
	
	deposit :=  Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: portfolio balance equals: 50! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:21:01' prior: 50745422!
test08PortfolioBalanceForOneAccount

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	portfolio add: account.
	
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: portfolio balance equals: 50! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:21:21'!
test07PortfolioBalanceForMultipleAccountsOneLevelDown

	| deposit withdraw portfolio account1 account2 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio2 := Portfolio new.
	portfolio2 add: account2.
	portfolio := Portfolio new.
	portfolio add: account1.
	portfolio add: portfolio2.
	
	deposit :=  Deposit register: 100 on: account1.
	withdraw := Withdraw register: 50 on: account2.
		
	self assert: (portfolio hasRegistered: deposit).
	self assert: (portfolio hasRegistered: withdraw).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:21:42' prior: 50745447!
test07PortfolioBalanceForMultipleAccountsOneLevelDown

	| deposit withdraw portfolio account1 account2 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio2 := Portfolio new.
	portfolio2 add: account2.
	portfolio := Portfolio new.
	portfolio add: account1.
	portfolio add: portfolio2.
	
	deposit :=  Deposit register: 100 on: account1.
	withdraw := Withdraw register: 50 on: account2.
		
	self assert: portfolio balance equals: 50! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:21:52' prior: 50745467!
test07PortfolioBalanceForMultipleAccountsOneLevelDown

	| portfolio account1 account2 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio2 := Portfolio new.
	portfolio2 add: account2.
	portfolio := Portfolio new.
	portfolio add: account1.
	portfolio add: portfolio2.
	
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account2.
		
	self assert: portfolio balance equals: 50! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/17/2019 19:22:06'!
test09PortfolioBalanceForMultipleAccountsOneLevelDown

	| portfolio account1 account2 portfolio2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio2 := Portfolio new.
	portfolio2 add: account2.
	portfolio := Portfolio new.
	portfolio add: account1.
	portfolio add: portfolio2.
	
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account2.
		
	self assert: portfolio balance equals: 50! !

PortfolioTest removeSelector: #test07PortfolioBalanceForMultipleAccountsOneLevelDown!

----STARTUP---- (17 October 2019 20:59:28) as /home/valchu/Documents/UBA/cuis/CuisUniversity-3839.image!


----End fileIn of /home/valchu/Documents/UBA/ISW1/23-Portfolio/Portfolio-Ejercicio.st----!

----QUIT----(17 October 2019 21:00:10) CuisUniversity-3839.image priorSource: 13216249!

----STARTUP---- (21 October 2019 14:48:30) as /home/valchu/Documents/UBA/cuis/CuisUniversity-3839.image!


----End fileIn of /home/valchu/Documents/UBA/ISW1/23-Portfolio/Portfolio-Ejercicio.st----!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'VPM 10/21/2019 14:58:59'!
test08AccountHasItself

	| account |
	
	account := ReceptiveAccount new.
	
	self assert: (account hasAccount: account)
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'VPM 10/21/2019 14:59:06' prior: 50745654!
test08AccountHasItself

	| account |
	
	account := ReceptiveAccount new.
	
	self assert: (account hasAccount: account)
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'VPM 10/21/2019 14:59:37'!
test09AccountHasItselfAsAnInternalAccount

	| account |
	
	account := ReceptiveAccount new.
	
	self assert: (account internalAccounts includes: account)
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/21/2019 15:00:15'!
test14PortfolioHasHimselfAsAnInternalAccount
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio internalAccounts includes: portfolio)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/21/2019 15:01:30' prior: 50745676!
test14PortfolioHasHimselfAsAnInternalAccount
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio internalAccounts includes: portfolio)! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/21/2019 15:02:40'!
test15EmpyPortfolioHasNoOne
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio internalAccounts size equals: 1! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VPM 10/21/2019 15:02:42' prior: 50745693!
test15EmpyPortfolioHasNoOne
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio internalAccounts size equals: 1! !

----QUIT----(21 October 2019 15:02:53) CuisUniversity-3839.image priorSource: 13231876!